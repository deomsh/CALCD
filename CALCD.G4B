!BAT
#-#+ CALCD.G4B v0.2.1_VBox (20221211), by deomsh
if "%~1"=="" && echo CALCD.G4B v0.2.1 && goto :smallhelp
if "%~1"=="/?" && goto :help
if "%~1"=="--help" && goto :help
if "%~1"=="help" && goto :%~1
setlocal && set * && set result=%result% && set MR=%MR% && set round=%round% && set deci=%deci% && set digi=%digi% && set fix=%fix% && set resrnd=%resrnd% && set hex=%hex% && set R=%R% && set thsep=%thsep%
debug msg=0
if %fix:~0,1%==- && set fix=
#NOTNEEDED#if not %fix:~0,1%==- if not exist hex || set fix=
set shift=0 && set "echoMR= > nul" && set q=N
if not /i "%~1"=="/Q" if not /i "%~2"=="/Q" if not /i "%~3"=="/Q" if not /i "%~4"=="/Q" || set q=Y && set /a shift=%shift% + 1
if not /i "%~1"=="/echo" if not /i "%~2"=="/echo" if not /i "%~3"=="/echo" if not /i "%~4"=="/echo" || set echoMR= && set "echor=call echo -n -e $[0x08]R=%^R%\x20\x20" && set /a shift=%shift% + 1
if not /i "%~1"=="/echoM" if not /i "%~2"=="/echoM" if not /i "%~3"=="/echoM" if not /i "%~4"=="/echoM" || set echoMR= && set /a shift=%shift% + 1
if not /i "%~1"=="/echoR" if not /i "%~2"=="/echoR" if not /i "%~3"=="/echoR" if not /i "%~4"=="/echoR" || set "echor=call echo -n -e $[0x08]R=%^R%\x20\x20" && set /a shift=%shift% + 1
if not /i "%~1"=="/V" if not /i "%~2"=="/V" if not /i "%~3"=="/V" if not /i "%~4"=="/V" || debug msg=3 && set echoMR= && set "echor=call echo -n -e $[0x08]R=%^R%\x20\x20" && set /a shift=%shift% + 1
if %shift%>=1 &; if %shift%==1 && shift ! if %shift%==2 && shift && shift ! if %shift%==3 && shift && shift && shift ! if %shift%==4 && shift && shift && shift && shift ! if %shift%==5 && shift && shift && shift && shift && shift
if %q%==Y && set "echoMR= > nul" && set echor= && debug msg=0
if not /i "%~1"=="+" && if not /i "%~1"=="-" && if not /i "%~1"=="*" && if not /i "%~1"=="/" && if not /i "%~1"=="^" && if not /i "%~1"=="round" && if not /i "%~1"=="deci" && if not /i "%~1"=="digi" && if not /i "%~1"=="fix" && if not /i "%~1"=="inv" && if not /i "%~1"=="sqrt" && if not /i "%~1"=="sq" && if not /i "%~1"=="cbrt" && if not /i "%~1"=="cb" && if not /i "%~1"=="hex" && if not /i "%~1"=="thsep" && if not /i "%~1"=="r" && if not /i "%~2"=="r" && if not /i "%~3"=="r" && set resrnd=
if exist R && set result=%R% && set lastrnd=%resrnd% ! if exist result && set R=%result% && set resrnd= ! set R=0 && set result=0 && set resrnd=
if not exist MR && set MR=0 && set memrnd=
if not exist echoMR && echo -n -e $[0x08]MR=%MR%\x20
%echor%
:calcfprestart
if exist result && set R=%result% && set resrnd=%lastrnd% ! set R=0 && set result=0 && set resrnd=
if /i "%~1"=="mc" && set MR=0 && set memrnd= && echo -e -n $[0x08]MR=0\x20\x20%echoMR% && set memecho=Y && set result=%R% && set lastrnd=%resrnd% && shift && goto :calcfploop
if /i "%~1"=="r" &; if "%~2"=="" && call :lastinput lastinput %R% && goto :calcfpend ! if exist R && set result=%R% && set lastrnd=%resrnd% && set resrnd= && shift && goto :calcfploop ! set "message=R does not exist" && goto :calcfpend
if /i "%~1"=="r!" &; if "%~2"=="" && call :lastinput lastinput %R% && goto :calcfpend ! if exist R && set lastrnd=%resrnd% && set resrnd= && call :lastinput lastinput %R%! && shift && goto :calcfploop ! set "message=R does not exist" && goto :calcfpend
#ORG#if /i %~1==r &; if "%~2"=="" && goto :calcfpend ! if exist R && set result=%R% && set lastrnd=%resrnd% && set resrnd= && shift && goto :calcfploop ! set "message=R does not exist" && goto :calcfpend
if /i "%~1"=="rm" && set mem2rnd=%lastrnd% && set lastrnd=%memrnd% &; if "%~2"=="" && set result=%MR% && set MR=%R% && set memrnd=%mem2rnd% && goto :calcfpend ! set result=%MR% && set MR=%R% && set memrnd=%mem2rnd% && echo -e -n $[0x08]MR=%R%\x20\x20%echoMR% && set memecho=Y && set memecho2=Y && shift && goto :calcfploop
if /i "%~1"=="mr" &; if "%~2"=="" && set lastrnd=%memrnd% && call :lastinput lastinput %MR% && goto :calcfpend ! set result=%MR% && set lastrnd=%memrnd% && shift && goto :calcfploop
#ORG#if /i %~1==mr &; if "%~2"=="" && set result=%MR% && set lastrnd=%memrnd% && goto :calcfpend ! set result=%MR% && set lastrnd=%memrnd% && shift && goto :calcfploop
if /i "%~1"=="m" && set MR=%R% && set memrnd=%lastrnd% && echo -e -n $[0x08]MR=%R%\x20\x20%echoMR% && set memecho=Y &; if "%~2"=="" && goto :calcfpend ! shift && goto :calcfploop
if /i "%~1"=="m+" && call :+ + %MR% %R% &; if exist result && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && set memrnd=%lastrnd% && set result=%R% && shift && goto :calcfploop ! goto :calcfpend
if /i %~1==m- && call :- - %MR% %R% &; if exist result && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && set memrnd=%lastrnd% && set result=%R% && shift && goto :calcfploop ! goto :calcfpend
if "%~1"=="" && goto :calcfpend
if /i "%~2"=="m" && set memrnd=%lastrnd% && set MR=%~1 && echo -e -n $[0x08]MR=%~1\x20\x20%echoMR% && set memecho=Y &; if not "%~3"=="" && set result=%~1 && shift && shift && goto :calcfploop ! goto :calcfpend
if /i "%~2"=="m+" && call :+ + %MR% %~1 &; if exist result && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && set memrnd=%lastrnd% && set result=%~1 && shift && shift && goto :calcfploop ! goto :calcfpend
if /i "%~2"=="m-" && call :- - %MR% %~1 &; if exist result && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && set memrnd=%lastrnd% && set result=%~1 && shift && shift && goto :calcfploop ! goto :calcfpend
if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" |; call :"%~1" "%~1" %~2 %~3 &; if not "%~4"=="" && shift && shift && shift && set rounded= && set lastrnd= && goto :calcfploop ! set rounded= && set lastrnd= && goto :calcfpend
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" || goto :%~1
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" |; call :%~1 %~1 %R% &; if exist result && if not "%~2"=="" && shift && goto :calcfprestart ! goto :calcfpend
if /i "%~1"=="inv" && call :/ / 1 %R% &; if exist result && if not "%~2"=="" && shift && goto :calcfprestart ! goto :calcfpend
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if not "%~2"=="" && set result= && call :%~1 %~1 %R% %~2 &; if not "%~3"=="" && shift && shift && goto :calcfploop ! goto :calcfpend
if not /i "%~2"=="sqrt" if not /i "%~2"=="inv" if not /i "%~2"=="hex" if not /i "%~2"=="cbrt" if not /i "%~2"=="sq" if not /i "%~2"=="cb" |; call :%~2 %~2 %~1 &; if exist result && if not "%~3"=="" && shift && shift && goto :calcfploop ! goto :calcfpend
if not "%~2"=="+" if not "%~2"=="-" if not "%~2"=="*" if not "%~2"=="/" if not "%~2"=="^" if not /i "%~2"=="round" if not /i "%~2"=="deci" if not /i "%~2"=="digi" |; if not "%~3"=="" && set result= && call :%~2 %~2 %~1 %~3 &; if not "%~4"=="" && shift && shift && shift && goto :calcfploop ! goto :calcfpend
if not /i "%~2"=="fix" |; if not "%~3"=="" && set result= && call :%~2 %~2 %~1 %~3 %~4 &; if not "%~4"=="" && shift && shift && shift && goto :calcfploop ! goto :calcfpend
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if "%~2"=="" && set thsep=Y && goto :calcfpend ! shift && goto :calcfprestart
if not /i "%~2"=="ts" if not /i "%~2"=="tsp" if not /i "%~2"=="tsep" if not /i "%~2"=="ths" if not /i "%~2"=="thsp" if not /i "%~2"=="thsep" if not /i "%~2"=="thssep" |; if "%~3"=="" && call :thsep nothsepar %~1 && set thsep=Y && goto :calcfpend ! set result=%~1 && shift && shift && goto :calcfprestart
if "%~2"=="" && call :lastinput lastinput "%~1" &; goto :calcfpend
set "message=Abort: 'some' argument is missing or wrong, check '%~1' or '%~2'" && goto :calcfpend
:calcfploop
if not exist result && goto :calcfpend ! set R=%result% && set resrnd=%lastrnd%
if "%~1"=="" && goto :calcfpend
%echor%
if /i "%~1"=="mc" && set MR=0 && set memrnd= && echo -e -n $[0x08]MR=0\x20\x20%echoMR% && set memecho=Y && shift && goto :calcfploop
if "/i %~1"=="m" && set memrnd=%lastrnd% && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && shift &; if "%~2"=="" && goto :calcfpend ! goto :memorydone
if /i "%~1"=="m+" && set memory2=%result% && call :+ + %MR% %result% &; if exist result && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && set memrnd=%lastrnd% && set result=%memory2% && shift && goto :memorydone ! goto :calcfpend
if /i "%~1"=="m-" && set memory2=%result% && call :- - %MR% %result% &; if exist result && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && set memrnd=%lastrnd% && set result=%memory2% && shift && goto :memorydone ! goto :calcfpend
:memorydone
if /i "%~1"=="mr" && if "%~2"=="" && set lastrnd=%memrnd% && call :lastinput lastinput %MR% && goto :calcfpend
#ORG#if /i %~1==mr && if "%~2"=="" && set result=%MR% && set lastrnd=%memrnd% && goto :calcfpend
if "%~1"=="" && goto :calcfpend
if not /i "%~1"=="mc" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="mr!" if not /i "%~1"=="r" if not /i "%~1"=="r!" || goto :calcfprestart
if "%~1"=="\\" && if /i "%~2"=="mc" && set MR=0 && set memrnd= && echo -e -n $[0x08]MR=0\x20\x20%echoMR% && set memecho=Y && shift &; if "%~3"=="" && goto :calcfpend ! set memecho=Y && goto :calcfprestart
if "%~1"=="\\" && if /i "%~2"=="m" && set MR=%R% && set memrnd=%lastrnd% && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && shift &; if "%~3"=="" && goto :calcfpend ! goto :calcfprestart
if "%~1"=="\\" && if /i "%~2"=="m+" && set memrnd=%lastrnd% && set memory2=%result% && call :+ + %MR% %result% &; if exist result && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && set memrnd=%lastrnd% && set result=%memory2% && shift && shift && goto :calcfprestart ! goto :calcfpend
if "%~1"=="\\" && if /i "%~2"=="m-" && set memrnd=%lastrnd% && set memory2=%result% && call :- - %MR% %result% &; if exist result && echo -e -n $[0x08]MR=%result%\x20\x20%echoMR% && set memecho=Y && set MR=%result% && set memrnd=%lastrnd% && set result=%memory2% && shift && shift && goto :calcfprestart ! goto :calcfpend
if "%~1"=="\\" && if /i "%~2"=="mr" && if "%~3"=="" && set result=%MR% && set lastrnd=%memrnd% && goto :calcfpend
if "%~1"=="\\" && shift && goto :calcfprestart
if /i "%~1"=="rm" && set mem2rnd=%lastrnd% && set lastrnd=%memrnd% && set memory2=%result% && set result=%MR% &; set MR=%memory2% && set memrnd=%mem2rnd% && echo -e -n $[0x08]MR=%memory2%\x20\x20%echoMR% && set memecho=Y && set memecho2=Y &; if "%~2"=="" && goto :calcfpend ! shift && goto :calcfploop
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" |; call :%~1 %~1 %result% &; if exist result && if not "%~2"=="" && shift && goto :calcfploop ! goto :calcfpend
if /i "%~1"=="inv" && call :/ / 1 %result% &; if exist result && if not "%~2"=="" && shift && goto :calcfploop ! goto :calcfpend
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" |; if not "%~2"=="" && set result= && call :%~1 %~1 %result% %~2 &; if not "%~3"=="" && shift && shift && goto :calcfploop ! goto :calcfpend
if not /i "%~1"=="fix" |; if not "%~2"=="" && set result= && call :%~1 %~1 %result% %~2 %~3 &; if not "%~3"=="" && shift && shift && goto :calcfploop ! goto :calcfpend
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if "%~2"=="" && set thsep=Y && goto :calcfpend ! shift
if "%~2"=="" && set "message=Abort: 'some' argument is missing or wrong, check '%~1'" && goto :calcfpend ! goto :calcfprestart
:calcfpend
if exist result && if "%result:~-1,1%"=="!" && call :lastinput lastinput %result%
if exist result && set R=%result% && set resrnd=%lastrnd%
setlocal && call :"==" "==" %R% %result% &; if %result%==1 && endlocal && if exist echor && %echor% ! endlocal
if %rounded%==Y && if exist digi && set round= && set deci= && set vardigi=%digi% && call :digi digi %result% %digi% &; set digi=%vardigi%
if exist result && if exist fix && set varfix=%fix% && set round= && set deci= && set fixed= && call :fix fix "%result%" "%fix%" &; set fix=%varfix%
if exist result && if exist deci && set vardeci=%deci% && call :deci deci %result% %deci% &; set deci=%vardeci%
if exist result && if exist round && set varround=%round% && call :round round %result% %round% &; set round=%varround%
if exist result && if exist hex && set varhex=%hex% && set fixed= && call :hex hex %result% &; set hex=%varhex%
#ORG#if exist result && if exist hex && set varhex=%hex% && call :hex hex %result% &; set hex=%varhex%
if %q%==N &; if exist message && set result= &; if exist echoMR if not exist echor || echo && echo $[0x0F]%message% ! echo $[0x0F]%message% &; if %message:~0,5%==Abort && call :smallhelp
#NO_SMALLHELP#if %q%==N &; if exist message && set result= &; if exist echoMR if not exist echor || echo && echo $[0x0F]%message% ! echo $[0x0F]%message%
if exist result && if not exist fixed && call Fn.11 "%result%" "." && call :stripzerosafter "%result%" &; if not exist result && set result=0 ! if %result:~-1,1%==. && set result=%result:~0,-1%
if exist echor && if %rounded%==Y && setlocal &; if %lastrnd%==1 && set lastrnd=up ! set lastrnd=down &; echo -e -n $[0x08]rounded=%rounded%\x20last=%lastrnd%\x20 && endlocal
if not exist message && if exist fix && echo -e -n $[0x08]fix=%fix%\x20
if not exist message && if exist digi && echo -e -n $[0x08]digi=%digi%\x20
if not exist message && if exist round && echo -e -n $[0x08]round=%round%\x20
if not exist message && if exist deci && echo -e -n $[0x08]deci=%deci%\x20
if not exist message && if exist hex && echo -e -n $[0x08]hex=%hex%\x20
if not exist message &; if not exist echoMR && echo -e -n $[0x08]MR=%MR%$[]\x20
if not exist message &; if exist echoMR if not exist echor if not exist fix if not exist digi if not exist round if not exist deci if not exist hex || echo
if exist result && if exist thsep && call :thsep thsep %result%
if %q%==N &; if exist result && echo result=%result%
debug msg=3
endlocal && set result=%result% && set rounded=%rounded% && set MR=%MR% && set "message=%message%" && set resrnd=%lastrnd% && set R=%R%
goto :eof

:addzerosafter
set reslen=%~1
set result=%~3
:addzerosafterloop
if not %reslen>=%~2 && set result=%result%%0 &; set /a reslen=%@retval% &; if not %reslen%>=%~2 && goto :addzerosafterloop ! set reslen= && goto :eof

:addzerosbefore
set reslen=%~1
set result=%~3
:addzerosbeforeloop
if not %reslen>=%~2 && set result=0%result% &; set /a reslen=%@retval% &; if not %reslen%>=%~2 && goto :addzerosbeforeloop ! set reslen= && goto :eof

:stripzerosbefore
if %~n1==0 && if %~x1==0 && set result= && goto :eof
set result=%~1
:stripzerosbeforeloop
if not %result:~0,2%==0x &; if %result:~0,1%==0 && set result=%result:~1% && goto :stripzerosbeforeloop ! goto :eof
if %result:~0,2%==0x &; if %result:~2,1%==0 && set result=0x%result:~3% && goto :stripzerosbeforeloop ! goto :eof

:stripzerosafter
if %~n1==0 && if %~x1==0 && set result= && goto :eof
if %~x1==0 && set result=%~n1 && goto :eof
set result=%~1
:stripzerosafterloop
if %result:~-1,1%==0 && set result=%result:~0,-1% && goto :stripzerosafterloop ! goto :eof

:operatorsinput
set "function=%~1" && shift
call Fn.11 "%~x1%~x2" "," && set "message=Abort '%function%': no comma allowed in decimals, check '%~1' or '%~2'" && goto :eof
call Fn.11 "%~1%~2" "*" && set "message=Abort '%function%': bad input, check '%~1' or '%~2'" && goto :eof
call Fn.11 "%~1%~2" "/" && set "message=Abort '%function%': bad input, check '%~1' or '%~2'" && goto :eof
call Fn.11 "%~1%~2" "%" && set "message=Abort '%function%': bad input, check '%~1' or '%~2'" && goto :eof
call Fn.11 "%~1%~2" "|" && set "message=Abort '%function%': bad input, check '%~1' or '%~2'" && goto :eof
call Fn.11 "%~1%~2" "<" && set "message=Abort '%function%': bad input, check '%~1' or '%~2'" && goto :eof
call Fn.11 "%~1%~2" ">" && set "message=Abort '%function%': bad input, check '%~1' or '%~2'" && goto :eof
set N1=%~n1 &; if "%N1:~0,2%"=="--" && set N1=%N1:~2% && set sign1=1 ! if "%N1:~0,2%"=="+-" && set N1=%N1:~2% && set sign1=-1 ! if "%N1:~0,2%"=="-+" && set N1=%N1:~2% && set sign1=-1 ! if "%N1:~0,2%"=="++" && set N1=%N1:~2% && set sign1=1 ! if "%N1:~0,1%"=="-" && set N1=%N1:~1% && set sign1=-1 ! if "%N1:~0,1%"=="+" && set N1=%N1:~1% && set sign1=1 ! set N1=%N1% && set sign1=1
if not exist N1 && set N1=0 && set N1len=0 ! if "%N1:~0,2%"=="0x" && if %N1:~2%==0 && set N1=0 && set N1len=0
#org#if not exist N1 && set N1=0 && set N1len=0 ! if %N1%==0 && set /a N1=%N1%
if not %N1%==0 && call :stripzerosbefore "%N1%" &; if exist result && set N1=%result% &; set /a N1len=%@retval% && set result=
call Fn.11 "%N1%" "," && if %N1len%>=5 &; if %N1:~-4,1%==, && set N1=%N1:~0,-4%%%N1:~-3,3% &; if %N1:~-7,1%==, && set N1=%N1:~0,-7%%%N1:~-6,6% &; if %N1:~-10,1%==, && set N1=%N1:~0,-10%%%N1:~-9,9% &; if %N1:~-13,1%==, && set N1=%N1:~0,-13%%%N1:~-12,12% &; if %N1:~-16,1%==, && set N1=%N1:~0,-16%%%N1:~-15,15% &; if %N1:~-19,1%==, && set N1=%N1:~0,-19%%%N1:~-18,18%
call Fn.11 "%N1%" "," &; set "message=Abort '%function%': wrong comma, use dot for decimals. Check '%~1'" && goto :eof
call Fn.11 "%~1" "," && set N1=%N1% &; set /a N1len=%@retval%
if not "%N1:~0,2%"=="0x" && if not %N1len%<=18 &; if %N1len%==19 && if %N1:~0,1%==9 && if not %N1:~1%<=223372036854775807 && set "message=Operator '%function%' out of range, check first number '%~1'" && goto :eof ! if not %N1len%<=19 && set "message=Operator '%function%' out of range, check first number '%~1'" && goto :eof
if "%N1:~0,2%"=="0x" && if not %N1len%<=17 &; if %N1len%==18 && if not %N1:~2,1%<=7 && set "message=Operator '%function%' out of range, check first number '%~1'" && goto :eof ! if not %N1len%<=18 && set "message=Operator '%function%' out of range, check first number '%~1'" && goto :eof
call Fn.11 "%N1%" "+" && set "message=Abort '%function%': bad input, check '%~1'" && goto :eof
call Fn.11 "%N1%" "-" && set "message=Abort '%function%': bad input, check '%~1'" && goto :eof
if not %N1%==0 && set /a N1=%N1% &; if %N1%==0 && set "message=Abort '%function%': bad input in '%~1'" && goto :eof
set N1=%N1% &; set /a N1len=%@retval%
set decimal1=%~x1 &; if not exist decimal1 && set numdeci1=0 ! if "%decimal1%"=="." && set decimal1= && set numdeci1=0 ! set decimal1=%decimal1:~1%
if exist decimal1 && call Fn.11 "%decimal1%" "+" && set "message=Abort '%function%': bad input, check '%~1'" && goto :eof
if exist decimal1 && call Fn.11 "%decimal1%" "-" && set "message=Abort '%function%': bad input, check '%~1'" && goto :eof
if exist decimal1 &; if %decimal1%==0 && set decimal1= && set numdeci1=0 ! call Fn.11 "%decimal1%" "G" && set "message=Abort '%function%': bad input in '%~1'" && goto :eof ! call Fn.11 "%decimal1%" "g" && set "message=Abort '%function%': bad input in '%~1'" && goto :eof ! call Fn.11 "%decimal1%" "M" && set "message=Abort '%function%': bad input in '%~1'" && goto :eof ! call Fn.11 "%decimal1%" "m" && set "message=Abort '%function%': bad input in '%~1'" && goto :eof ! call Fn.11 "%decimal1%" "K" && set "message=Abort '%function%': bad input in '%~1'" && goto :eof ! call Fn.11 "%decimal1%" "k" && set "message=Abort '%function%': bad input in '%~1'" && goto :eof ! calc %decimal1% || set "message=Abort '%function%': bad input in '%~1'" && goto :eof
if exist decimal1 && set decimal1=%decimal1:~0,18% &; set /a numdeci1=%@retval% && if %decimal1:~-1,1%==0 && if not exist fix && call :stripzerosafter "%decimal1%" &; set decimal1=%result% && set result= &; if exist decimal1 && set decimal1=%decimal1% &; set /a numdeci1=%@retval%
if not exist decimal1 && set numdeci1=0
if "%~2"=="" && goto :eof
set N2=%~n2 &; if "%N2:~0,2%"=="--" && set N2=%N2:~2% && set sign2=1 ! if "%N2:~0,2%"=="+-" && set N2=%N2:~2% && set sign2=-1 ! if "%N2:~0,2%"=="-+" && set N2=%N2:~2% && set sign2=-1 ! if "%N2:~0,2%"=="++" && set N2=%N2:~2% && set sign2=1 ! if "%N2:~0,1%"=="-" && set N2=%N2:~1% && set sign2=-1 ! if "%N2:~0,1%"=="+" && set N2=%N2:~1% && set sign2=1 ! set N2=%N2% && set sign2=1
if not exist N2 && set N2=0 && set N2len=0 ! if "%N2:~0,2%"=="0x" && if %N2:~2%==0 && set N2=0 && set N2len=0
#org#if not exist N2 && set N2=0 && set N2len=0 ! if %N2%==0 && set /a N2=%N2%
if not %N2%==0 && call :stripzerosbefore "%N2%" &; if exist result && set N2=%result% &; set /a N2len=%@retval% && set result=
call Fn.11 "%N2%" "," && if %N2len%>=5 &; if %N2:~-4,1%==, && set N2=%N2:~0,-4%%%N2:~-3,3% &; if %N2:~-7,1%==, && set N2=%N2:~0,-7%%%N2:~-6,6% &; if %N2:~-10,1%==, && set N2=%N2:~0,-10%%%N2:~-9,9% &; if %N2:~-13,1%==, && set N2=%N2:~0,-13%%%N2:~-12,12% &; if %N2:~-16,1%==, && set N2=%N2:~0,-16%%%N2:~-15,15% &; if %N2:~-19,1%==, && set N2=%N2:~0,-19%%%N2:~-18,18%
call Fn.11 "%N2%" "," &; set "message=Abort '%function%': wrong comma, use dot for decimals. Check '%~2'" && goto :eof
call Fn.11 "%~2" "," && set N2=%N2% &; set /a N2len=%@retval%
call Fn.11 "%N2%" "+" && set "message=Abort '%function%': bad input, check '%~2'" && goto :eof
call Fn.11 "%N2%" "-" && set "message=Abort '%function%': bad input, check '%~2'" && goto :eof
if not "%N2:~0,2%"=="0x" && if not %N2len%<=18 &; if %N2len%==19 && if %N2:~0,1%==9 && if not %N2:~1%<=223372036854775807 && set "message=Operator '%function%' out of range, check second number '%~2'" && goto :eof ! if not %N2len%<=19 && set "message=Operator '%function%' out of range, check second number '%~2'" && goto :eof
if "%N2:~0,2%"=="0x" && if not %N2len%<=17 &; if %N2len%==18 && if not %N2:~2,1%<=7 && set "message=Operator '%function%' out of range, check second number '%~2'" && goto :eof ! if not %N2len%<=18 && set "message=Operator '%function%' out of range, check second number '%~2'" && goto :eof
if not %N2%==0 && set /a N2=%N2% &; if %N2%==0 && set "message=Abort '%function%': bad input in '%~2'" && goto :eof
set N2=%N2% &; set /a N2len=%@retval%
set decimal2=%~x2 &; if not exist decimal2 && set numdeci2=0 && goto :eof ! if "%decimal2%"=="." && set decimal2= && set numdeci2=0 ! set decimal2=%decimal2:~1%
if exist decimal2 && call Fn.11 "%decimal2%" "+" && set "message=Abort '%function%': bad input, check '%~2'" && goto :eof
if exist decimal2 && call Fn.11 "%decimal2%" "-" && set "message=Abort '%function%': bad input, check '%~2'" && goto :eof
if exist decimal2 &; if %decimal2%==0 && set decimal2= && set numdeci2=0 ! call Fn.11 "%decimal2%" "G" && set "message=Abort '%function%': bad input in '%~2'" && goto :eof ! call Fn.11 "%decimal2%" "g" && set "message=Abort '%function%': bad input in '%~2'" && goto :eof ! call Fn.11 "%decimal2%" "M" && set "message=Abort '%function%': bad input in '%~2'" && goto :eof ! call Fn.11 "%decimal2%" "m" && set "message=Abort '%function%': bad input in '%~2'" && goto :eof ! call Fn.11 "%decimal2%" "K" && set "message=Abort '%function%': bad input in '%~2'" && goto :eof ! call Fn.11 "%decimal2%" "k" && set "message=Abort '%function%': bad input in '%~2'" && goto :eof ! calc %decimal2% || set "message=Abort '%function%': bad input in '%~2'" && goto :eof
if exist decimal2 && set decimal2=%decimal2:~0,18% &; set /a numdeci2=%@retval% && if %decimal2:~-1,1%==0 && if not exist fix && call :stripzerosafter "%decimal1%" &; set decimal1=%result% && set result= &; if exist decimal1 && set decimal1=%decimal1% &; set /a numdeci1=%@retval%
if not exist decimal2 && set numdeci2=0
goto :eof

:endlocal
endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && set fixed=%fixed%
goto :eof

:lastinput
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R% ! if /i %n1:~-3,3%==mr! && set n1=%n1:~0,-3%%%MR%! && set lastrnd=
#set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
#if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if %sign1%==-1 && set sign=-
if exist decimal1 && set result=%sign%%%N1%.%decimal1% ! set result=%sign%%%N1%
goto :endlocal

:+
#-#+ + \tOperator + : Decimal summation of number1 and number2
#-# Use\tCALCD2.G4B [switch] number1 + number2\nRemarks Infix operator, existing result can be used instead of number1\n\tOutput: max 19 integers + 18 decimals, no rounding\nExample\tCALCD.G4B 2.2 + 3\nExample\tCALCD.G4B 2.2568 + 700.123\nExample\tCALCD.G4B -20.56 + -9.7\nExample\tCALCD.G4B -20.56 + -9.7 + R\nExample\tCALCD.G4B +45.89 + 200000.7\nExample\tCALCD.G4B +45.89 + 200000.7 M STDEVP 2 7 M+ MR\nExample\tCALCD.G4B 45.89 + 200,000.7 M 45.89 * 200,000.7 M+ MR THSEP\nExample CALCD.G4B 1 + 1\x20;;\x20CALCD.G4B R + 1\x20;;\x20CALCD.G4B + 1\x20;;\x20echo\x20&&\x20set\nExample CALCD.G4B 10\nExample CALCD.G4B 10.10\nExample CALCD.G4B 3,628,800.0000000\nExample CALCD.G4B 10!\nExample set fix=5 ;; CALCD.G4B 3,628,800.0000000\nExample set * ;; CALCD.G4B 0x7FFFFFFFFFFFFFFF\nExample set * ;; CALCD.G4B /Q 0x7FFFFFFFFFFFFFFF ;; echo && set\nExample CALCD.G4B 0x8000000000000000\nExample set * ;; CALCD.G4B /Q 0x8000000000000000 ;; set r ;; set
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if exist decimal1 && if not exist decimal2 && set decimal2=0 && set numdeci2=1
if exist decimal2 && if not exist decimal1 && set decimal1=0 && set numdeci1=1
if not %numdeci1%>=%numdeci2% && call :addzerosafter "%numdeci1%" "%numdeci2%" "%decimal1%" &; set decimal1=%result% &; set /a numdeci1=%@retval% && set result=
if not %numdeci2%>=%numdeci1% && call :addzerosafter "%numdeci2%" "%numdeci1%" "%decimal2%" &; set decimal2=%result% &; set /a numdeci2=%@retval% && set result=
set numdeci=%numdeci1%
set integer1=%N1% &; set /a intlen1=%@retval%
set integer2=%N2% &; set /a intlen2=%@retval%
if not %intlen1%<=18 &; if %intlen1%==19 && if %intlen1:~0,1%==9 && if not %intlen1:~1%<=223372036854775806 && set "message=Substraction out of range, check first number '%~1'" && goto :eof ! if not %intlen1%<=19 && set "message=Addition out of range, check first number '%~1'" && goto :endlocal
if not %intlen2%<=18 &; if %intlen2%==19 && if %intlen2:~0,1%==9 && if not %intlen2:~1%<=223372036854775806 && set "message=Substraction out of range, check second number '%~2'" && goto :eof ! if not %intlen2%<=19 && set "message=Addition out of range, check second number '%~2'" && goto :endlocal
if not %intlen1%>=%intlen2% && set /a maxlen=%intlen2% ! set /a maxlen=%intlen1%
if not %maxlen%<=18 && if %sign1%==1 && if %sign2%==1 && if not integer1==0 && if not integer2==0 && set /a integer=%integer1%+%integer2% &; if %integer%<=0 && set "message=Addition out of range, check '%~1' or '%~2'" && goto :endlocal
if not %maxlen%<=18 && if %sign1%==-1 && if %sign2%==-1 && if not integer1==0 && if not integer2==0 && set /a integer=%integer1%+%integer2% &; if %integer%<=0 && set "message=Addition out of range, check '%~1' or '%~2'" && goto :endlocal
if %numdeci%==0 && set /a result=%sign1:~0,-1%%%N1% + %sign2:~0,-1%%%N2% && goto :endlocal
set /a integer=%sign1:~0,-1%%%N1% + %sign2:~0,-1%%%N2% && set N1= && set N2= &; if "%integer:~0,1%"=="-" && set signint=- && set integer=%integer:~1%
set /a decimals=%sign1:~0,-1%%%decimal1% + %sign2:~0,-1%%%decimal2% &; if "%decimals:~0,1%"=="-" && set signdec1=- && set decimals=%decimals:~1%
set decimals=000000000000000000%decimals% &; call set /a N1=%^decimals:~0,-%numdeci%%% && call set decimals=%^decimals:~-%numdeci%,%numdeci%%%
if not %integer%==0 && if not "%signint%"=="%signdec1%" && set UNO=000000000000000000 &; call set UNO=1%^UNO:~0,%numdeci%%%
if not %integer%==0 && if not "%signint%"=="%signdec1%" && set /a decimals=%signint%%%UNO% + %signdec1%%%decimals% &; if "%decimals:~0,1%"=="-" && set signdec2=- && set decimals=%decimals:~1%
if not %integer%==0 && if not "%signint%"=="%signdec1%" && set decimals=000000000000000000%decimals% &; call set /a N2=%^decimals:~0,-%numdeci%%% && call set decimals=%^decimals:~-%numdeci%,%numdeci%%%
if %integer%==0 && set integer=%signdec1%%%N1% ! if "%signint%"=="%signdec1%" && set /a integer=%signint%%%integer% + %signdec1%%%N1% ! if "%signdec1%"=="-" && set /a integer=%signint%%%integer% - 1 ! if "%signdec2%"=="-" && set /a integer=%signint%%%integer% + 1
if %decimals%==0 && set /a result=%integer% && goto :endlocal
if %integer%==0 && if "%signdec2%"=="-" && set integer=-0
#CENTRAL#if not exist fix && call :stripzerosafter "%decimals%" &; set decimals=%result% && set result=
set result=%integer%.%decimals%
goto :endlocal

:-
#-#+ - \tOperator - : Decimal substraction of number1 and number2
#-# Use\tCALCD.G4B [switch] number1 - number2\nRemarks\tInfix operator, existing result can be used instead of number1\n\tOutput: max 19 integers + 18 decimals, no rounding\nExample CALCD.G4B 5.2 - 3\nExample CALCD.G4B 2.2568 - -700.123\nExample CALCD.G4B -67.56 - 59.7\nExample CALCD.G4B 200000.7 - +45.349\nExample CALCD.G4B /echo 200000.7 - 45.349 M 11 INV * 1,000 M- MR ROUND 2 THSEP\nExample CALCD.G4B 1 - 1\x20;;\x20CALCD.G4B R - 1\x20;;\x20CALCD.G4B - 1\x20;;\x20echo\x20&&\x20set
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if exist decimal1 && if not exist decimal2 && set decimal2=0 && set numdeci2=1
if exist decimal2 && if not exist decimal1 && set decimal1=0 && set numdeci1=1
if not %numdeci1%>=%numdeci2% && call :addzerosafter "%numdeci1%" "%numdeci2%" "%decimal1%" &; set decimal1=%result% &; set /a numdeci1=%@retval% && set result=
if not %numdeci2%>=%numdeci1% && call :addzerosafter "%numdeci2%" "%numdeci1%" "%decimal2%" &; set decimal2=%result% &; set /a numdeci2=%@retval% && set result=
set numdeci=%numdeci1%
set integer1=%N1% &; set /a intlen1=%@retval%
set integer2=%N2% &; set /a intlen2=%@retval%
if not %intlen1%<=18 &; if %intlen1%==19 && if %intlen1:~0,1%==9 && if not %intlen1:~1%<=223372036854775807 && set "message=Substraction out of range, check first number '%~1'" && goto :eof ! if not %intlen1%<=19 && set "message=Substraction out of range, check first number '%~1'" && goto :endlocal
if not %intlen2%<=18 &; if %intlen2%==19 && if %intlen2:~0,1%==9 && if not %intlen2:~1%<=223372036854775807 && set "message=Substraction out of range, check second number '%~2'" && goto :eof ! if not %intlen2%<=19 && set "message=Substraction out of range, check second number '%~2'" && goto :endlocal
if not %intlen1%>=%intlen2% && set /a maxlen=%intlen2% ! set /a maxlen=%intlen1%
if not %maxlen%<=18 && if %sign1%==1 && if %sign2%==-1 && if not integer1==0 && if not integer2==0 && set /a integer=%integer1%-%integer2% &; if %integer%<=0 && set "message=Substraction out of range, check '%~1' or '%~2'" && goto :endlocal
if not %maxlen%<=18 && if %sign1%==-1 && if %sign2%==1 && if not integer1==0 && if not integer2==0 && set /a integer=%integer1%-%integer2% &; if %integer%<=0 && set "message=Substraction out of range, check '%~1' or '%~2'" && goto :endlocal
if %numdeci%==0 && set /a result=%sign1:~0,-1%%%N1% - %sign2:~0,-1%%%N2% && goto :endlocal
set /a integer=%sign1:~0,-1%%%N1% - %sign2:~0,-1%%%N2% && set N1= && set N2= &; if "%integer:~0,1%"=="-" && set signint=- && set integer=%integer:~1%
set /a decimals=%sign1:~0,-1%%%decimal1% - %sign2:~0,-1%%%decimal2% &; if "%decimals:~0,1%"=="-" && set signdec1=- && set decimals=%decimals:~1%
set decimals=000000000000000000%decimals% &; call set /a N1=%^decimals:~0,-%numdeci%%% && call set decimals=%^decimals:~-%numdeci%,%numdeci%%%
if not %integer%==0 && if not "%signint%"=="%signdec1%" && set UNO=000000000000000000 &; call set UNO=1%^UNO:~0,%numdeci%%%
if not %integer%==0 && if not "%signint%"=="%signdec1%" && set /a decimals=%signint%%%UNO% + %signdec1%%%decimals% &; if "%decimals:~0,1%"=="-" && set signdec2=- && set decimals=%decimals:~1%
if not %integer%==0 && if not "%signint%"=="%signdec1%" && set decimals=000000000000000000%decimals% &; call set /a N2=%^decimals:~0,-%numdeci%%% && call set decimals=%^decimals:~-%numdeci%,%numdeci%%%
if %integer%==0 && set integer=%signdec1%%%N1% ! if "%signint%"=="%signdec1%" && set /a integer=%signint%%%integer% + %signdec1%%%N1% ! if "%signdec1%"=="-" && set /a integer=%signint%%%integer% - 1 ! if "%signdec2%"=="-" && set /a integer=%signint%%%integer% + 1
if %decimals%==0 && set /a result=%integer% && goto :endlocal
if %integer%==0 && if "%signdec2%"=="-" && set integer=-0
#CENTRAL#if not exist fix && call :stripzerosafter "%decimals%" &; set decimals=%result% && set result=
set result=%integer%.%decimals%
goto :endlocal

:*
#-#+ * \tOperator * : Decimal multiplication of number1 and number2
#-# Use\tCALCD.G4B [switch] number1 * number2\nRemarks\tInfix operator, existing result can be used instead of number1\n\tInternally 55 digits, 19th decimal is used for rounding\nExample CALCD.G4B 2.2 * 3\nExample CALCD.G4B 2.2568 * 700.123\nExample CALCD.G4B -0.56 * -59.7\nExample CALCD.G4B 0.0123456789 * 200000.7\nExample CALCD.G4B -.0123456789 * +200000.7\nExample CALCD.G4B /echo -.0123456789 * +200000.7 M * 80 M+ RM\nExample CALCD.G4B 100,000 * 1 / 3\nExample CALCD.G4B 3 INV * 100,000
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
set sign=- &; if not "%sign1%"=="-1" && if not "%sign2%"=="-1" && set sign= ! if "%sign1%"=="-1" && if "%sign2%"=="-1" && set sign=
if %numdeci1%==0 && if %numdeci2%==0 && set /a N=%N1% * %N2% &; if not %N1%==0 && if not %N2%==0 && if %N%<=0 && set "message=Multiplication out of range, check '%~1' or '%~2'" && goto :endlocal ! set result=%sign%%%N% && goto :endlocal
set /a numdeciP=%numdeci1% + %numdeci2%
set N1=000000000000000000%N1% && set N2=000000000000000000%N2%
set d1=%decimal1%%000000000000000000000000000000000000 && set decimal1= && set numdeci1=
set d2=%decimal2%%000000000000000000000000000000000000 && set decimal2= && set numdeci2=
set /a N1B=%N1:~-19,10% && set /a N1A=%N1:~-9,9%
set /a N2B=%N2:~-19,10% && set /a N2A=%N2:~-9,9%
set d1A=%d1:~0,9% && set d1B=%d1:~9,9% && set d1C=%d1:~18,9%
set d2A=%d2:~0,9% && set d2B=%d2:~9,9% && set d2C=%d2:~18,9%
setlocal
set /a d1Ad2C=%d1A% * %d2C%
set /a d2Ad1C=%d2A% * %d1C%
set /a d1Bd2B=%d1B% * %d2B%
set /a SumEm36=%d1Ad2C% + %d2Ad1C% + %d1Bd2B%
set d1d2m36=%SumEm36:~-9,9% && set /a SEm36p9=%SumEm36:~0,-9%
set d1d2m36=000000000%d1d2m36%
set d1d2m36=%d1d2m36:~-9,9%
endlocal && set d1d2m36= && set SEm36p9=%SEm36p9%
setlocal
set /a N1Ad2C=%N1A% * %d2C%
set /a N2Ad1C=%N2A% * %d1C%
set /a d1Ad2B=%d1A% * %d2B%
set /a d2Ad1B=%d2A% * %d1B%
set /a SumEm27=%N1Ad2C% + %N2Ad1C% + %d1Ad2B% + %d2Ad1B% + %SEm36p9%
set d1d2m27=%SumEm27:~-9,9% && set /a SEm27p9=%SumEm27:~0,-9%
set d1d2m27=000000000%d1d2m27%
set d1d2m27=%d1d2m27:~-9,9%
if %d1d2m27:~-9,1%>=5 && set /a SEm27p9=%SEm27p9% + 1 && set lastrnd=1 ! set lastrnd=0
endlocal && set d1d2m27= && set SEm27p9=%SEm27p9% && set lastrnd=%lastrnd%
setlocal
set /a N1Bd2C=%N1B% * %d2C%
set /a N2Bd1C=%N2B% * %d1C%
set /a N1Ad2B=%N1A% * %d2B%
set /a N2Ad1B=%N2A% * %d1B%
set /a d1Ad2A=%d1A% * %d2A%
set /a SumEm18=%N1Bd2C% + %N2Bd1C% + %N1Ad2B% + %N2Ad1B% + %d1Ad2A% + %SEm27p9%
set d1d2m18=%SumEm18:~-9,9% && set /a SEm18p9=%SumEm18:~0,-9%
set d1d2m18=000000000%d1d2m18%
set d1d2m18=%d1d2m18:~-9,9%
endlocal && set d1d2m18=%d1d2m18% && set SEm18p9=%SEm18p9%
setlocal
set /a N1Bd2B=%N1B% * %d2B%
set /a N2Bd1B=%N2B% * %d1B%
set /a N1Ad2A=%N1A% * %d2A%
set /a N2Ad1A=%N2A% * %d1A%
set /a SumEm9=%N1Bd2B% + %N2Bd1B% + %N1Ad2A% + %N2Ad1A% + %SEm18p9%
set d1d2m9=%SumEm9:~-9,9% && set /a SEm9p9=%SumEm9:~0,-9%
set d1d2m9=000000000%d1d2m9%
set d1d2m9=%d1d2m9:~-9,9%
endlocal && set d1d2m9=%d1d2m9% && set SEm9p9=%SEm9p9%
setlocal
set /a N1Bd2A=%N1B% * %d2A%
set /a N2Bd1A=%N2B% * %d1A%
set /a N1AN2A=%N1A% * %N2A%
set /a SumEp0=%N1Bd2A% + %N2Bd1A% + %N1AN2A% + %SEm9p9%
set SumEp0=0000000000%SumEp0%
set N1N2p0=%SumEp0:~-9,9% && set /a SE0p9=%SumEp0:~0,-9%
set N1N2p0=000000000%N1N2p0%
set N1N2p0=%N1N2p0:~-9,9%
endlocal && set N1N2p0=%N1N2p0% && set SE0p9=%SE0p9%
setlocal
set /a N1BN2A=%N1B% * %N2A%
set /a N2BN1A=%N2B% * %N1A%
set /a SumEp9=%N1BN2A% + %N2BN1A% + %SE0p9%
set SumEp9=0000000000%SumEp9%
set N1N2p9=%SumEp9:~-10,10%
if %N1N2p9%==0 && set N1N2p9=
endlocal && set N1N2p9=%N1N2p9%
#NOTNEEDEDNOW#Above 10Exp18
##setlocal
##set /a N1CN2A=%N1C% * %N2A%
##set /a N2CN1A=%N2C% * %N1A%
##set /a SumEp18=%N1CN2A% + %N2CN1A% + %SE9p9%
##set SumEp18=0000000000%SumEp18%
##set N1N2p18=%SumEp18:~-10,10%
##if %N1N2p18%==0 && set N1N2p18=
##endlocal && set N1N2p18=%N1N2p18%
#
if %d1d2m36%==0 && set d1d2m36=
if not exist d1d2m36 && if %d1d2m27%==0 && set d1d2m27=
if not exist d1d2m27 && if %d1d2m18%==0 && set d1d2m18=
if not %d1d2m9%%%d1d2m18%==0 && set resdec=%d1d2m9%%%d1d2m18% ! set resdec=
if not exist N1N2p9 && set /a N1N2p0=%N1N2p0%
set resint=%N1N2p9%%%N1N2p0%
if exist resdec && if not %rounded%==Y && call :stripzerosafter "%resdec%" &; set resdec=%result% && set result=
#CENTRAL#if exist resdec && call :stripzerosafter "%resdec%" &; set resdec=%result% && set result=
if %resint%>=1 && call :stripzerosbefore "%resint%" &; set resint=%result% && set result=
if exist resdec && set result=%sign%%%resint%.%resdec% ! set result=%sign%%%resint%
goto :endlocal

:/
#-#+ / \tOperator / : Decimal Decimal division of number1 and number2
#-# Use\tCALCD.G4B [switch] number1 / number2\nRemarks\tInfix operator, existing result can be used instead of number1\n\tInternally 56 digits, 19th decimal is used for rounding\n\tHighest divider: 922,337,203,685,477,580 or 0xCCCCCCCCCCCCCCC\nExample CALCD.G4B 20 / 3.3333\nExample CALCD.G4B 1111111111111111111.111111111111111111 / 87654321.123456789\nExample CALCD.G4B 100,000.1234 / -2.5 THSEP\nExample CALCD.G4B +2050.234 / -7 FIX 4\nExample CALCD.G4B 1 / 0.0001\nExample CALCD.G4B 0.0001 / 0.0001 M 0.0001 / 0.0001 M- MR\nExample CALCD.G4B 1 / 3 * 100,000\nExample CALCD.G4B 100,000 * 1 / 3
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if %N2%>=1 && set integer2=%N2%%%decimal2% &; set /a int2len=%@retval%
if %N2%==0 && set /a integer2=%decimal2% &; set /a int2len=%@retval% &; if not %int2len%<=18 && set integer2=%integer2:~0,18% && set /a numdeci2=18 &; if %numdeci2%>=1 && call set decimal2=%^decimal2:~0,%numdeci2%%% ! set decimal2= && set numdeci2=0
if %N1%>=1 && set integer1=%N1%%%decimal1% &; set /a int1len=%@retval%
if %N1%==0 && set /a integer1=%decimal1% &; set /a int1len=%@retval% &; if not %int1len%<=18 && set integer1=%integer1:~0,18% && set /a numdeci1=18 &; if %numdeci1%>=1 && call set decimal1=%^decimal1:~0,%numdeci1%%% ! set decimal1= && set numdeci1=0
if %N2%==0 && if %decimal2%==0 && set "message=Abort %0: divider '%~2' is zero" && goto :endlocal
if %N2%==0 && if not exist decimal2 && set "message=Abort %0: divider '%~2' is (near) zero" && goto :endlocal
if %N1%>=1 && set /a N1=%N1% &; set number1=%N1%%%decimal1% &; set /a num1len=%@retval%
if %N1%==0 && set number1=%decimal1% &; set /a num1len=%@retval%
if %N2%>=1 && set /a N2=%N2% &; set number2=%N2%%%decimal2% &; set /a num2len=%@retval%
if %N2%==0 && set number2=%decimal2% &; set /a num2len=%@retval%
if not %N2%<=922337203685477580 && set "message=Division out of range" && goto :endlocal
set /a decidiff=%numdeci1% - %numdeci2%
if not %num2len%<=10 && goto :longdivider
if not %number2%<=0xCCCCCCC && goto :longdivider
set num2loop=0
:calcnum2loop
if %num1len%<=19 && if not %number2%<=%number1% && set number1=%number1%%0 && set /a num2loop=%num2loop% + 1 && goto :calcnum2loop
set number2=%number2% &; set /a num2len=%@retval%
set divloops=0
set /a maxloops=19 - %decidiff% - %num2loop%
if %num1len%<=10 &; if not %number1%>=0x80000000 && goto :calcremainloop
set num1div=%number1%
set div1len=%num2len%
:calcdividendloop
set num1div=%num1div% &; set /a num1len=%@retval%
if %num2len%<=%num1len% &; call if %number2%<=%^num1div:~0,%div1len%%% && call set dividend=%^num1div:~0,%div1len%%% && call set num1div=%^num1div:~%div1len%%% ! set /a div1len=%div1len% + 1 && goto :calcdividendloop
:calcdivideloop
if %dividend%>=0x80000000 && set "message=Division out of range" && goto :endlocal
set /a result=%dividend% / %number2% &; set sum=%sum%%%result% && set /a remainer=%dividend% % %number2%
if exist num1div && set dividend=%remainer%%%num1div:~0,1% && set num1div=%num1div:~1% && goto :calcdivideloop
if not %remainer%==0 && if not %divloops%>=%maxloops% && set dividend=%remainer%%0 && set /a divloops=%divloops% + 1 && goto :calcdivideloop
set /a numdeci=%divloops% + %num2loop% + %decidiff%
set sum=0000000000000000000%sum% && set result=
goto :calcdivideend
:calcremainloop
if %number1%>=0x80000000 && set "message=Division out of range" && goto :endlocal
set /a result=%number1% / %number2%
set /a remainer=%number1% % %number2%
set sum=%sum%%%result% && if not %remainer%==0 && if not %divloops%>=%maxloops% && set number1=%remainer%%0 && set /a divloops=%divloops% + 1 && goto :calcremainloop
set /a numdeci=%divloops% + %num2loop% + %decidiff%
set sum=0000000000000000000%sum% && set result=
:calcdivideend
if %numdeci%>=1 && call set /a integer=%^sum:~0,-%numdeci%%% && call set decimals=%^sum:~-%numdeci%,%numdeci%%% ! if %numdeci%==0 && set /a integer=%sum%
if exist round2 && if %numdeci%>=1 && set decidiff=0 && set integer=%integer% &; set /a intlen=%@retval% && if %integer%==0 && set intlen=0
if exist round2 && if %intlen%==0 && if %numdeci%>=2 && call :stripzerosbefore "%decimals%" &; set result=%result% &; set /a decidiff=%numdeci% - %@retval% && set result=
if exist round2 && if %numdeci%>=1 &; if %integer%>=1 && set sum=%integer%%%decimals% ! set sum=%decimals% && set /a num2len=%num2len% + %decidiff%
if exist round2 && call set sum=%^sum:~0,%num2len%%% &; set /a numdeci=%num2len% - %intlen%
if exist round2 && if %numdeci%>=1 && set sum=0000000000000000000%sum%
if exist round2 &; if %numdeci%>=1 && set round2= && goto :calcdivideend ! set decimals=
if not %numdeci%>=0 && set zeros=0000000000000000000 && set /a numzeros=-1 * %numdeci% &; call set zeros=%^zeros:~0,%numzeros%%% &; set /a integer=%sum%%%zeros%
set maxdeci=19 &; if %numdeci%>=%maxdeci% && set numdeciO=%numdeci% && set /a numdeci=%maxdeci% - 1 &; call set decimals=%^decimals:~0,%maxdeci%%% &; if not %decimals:~-1,1%==0 && set rounded=Y
if exist numdeciO && if not %numdeci%>=%numdeciO% &; if %decimals:~-1,1%>=5 && set /a decimal=%decimals:~0,-1% + 1 && set lastrnd=1 ! set /a decimal=%decimals:~0,-1% && set lastrnd=0 &; set decimal=000000000000000000%decimal% &; call set decimals=%^decimal:~-%numdeci%,%numdeci%%% && call set /a round=%^decimal:~0,-%numdeci%%% &; if %round%>=1 && set /a integer=%integer% + %round%
#CENTRAL#if exist decimals && if not exist fix && call :stripzerosafter "%decimals%" &; set decimals=%result% && set result=
if not %remainer%==0 && set rounded=Y
if exist decimals && set quotient=%integer%.%decimals% ! set quotient=%integer%
set sign=- &; if not "%sign1%"=="-1" && if not "%sign2%"=="-1" && set sign= ! if "%sign1%"=="-1" && if "%sign2%"=="-1" && set sign=
set result=%sign%%%quotient%
goto :endlocal

:longdivider
if not %num2len%<=18 && goto :longerdivider
if not %number2%<=0xCCCCCCCCCCCCCC && goto :longerdivider
#=#+Highest input: 922337203685477580 or 0xCCCCCCCCCCCCCCC
set number2=%number2% &; set /a num2len=%@retval%
set /a maxloops=19 - %decidiff%
set zeroloop=0
call set dividend=%^number1:~0,%num2len%%% && call set number1=%^number1:~%num2len%%%
:calclongdividendloop
if not exist number1 && if not %end%==Y && set number1=0000000000000000000000000000000000000000 && set end=Y
if not %dividend%>=%number2% && set dividend=%dividend%%%number1:~0,1% && set number1=%number1:~1% && set sum=%sum%%0 &; if %end%==Y && set /a zeroloop=%zeroloop% + 1
if not %dividend%>=%number2% && goto :calclongdividendloop
set D=1
:calclongdividerloop
if not exist number1 && if not %end%==Y && set number1=0000000000000000000000000000000000000000 && set end=Y
set /a remainer=%dividend% - %number2%
if %remainer%>=%number2% && set dividend=%remainer% && set /a D=%D% + 1 && goto :calclongdividerloop
if %remainer%>=0 && set sum=%sum%%%D% && set D=1 && if exist number1 && set dividend=%remainer%%%number1:~0,1% && set number1=%number1:~1%
if not %remainer%>=0 && set sum=%sum%%0 && set D=1 && if exist number1 && set dividend=%dividend%%%number1:~0,1% && set number1=%number1:~1%
if exist dividend && if not %zeroloop%>=%maxloops% &; if %end%==Y && set /a zeroloop=%zeroloop% + 1 && goto :calclongdividerloop ! goto :calclongdividerloop
set lostlen=0 && if exist num2lost && set num2lost=%num2lost% &; set /a lostlen=%@retval%
set /a numdeci=%zeroloop% + %decidiff% + %lostlen%
set sum=0000000000000000000%sum%
if %numdeci%>=1 && call set /a integer=%^sum:~0,-%numdeci%%% && call set decimals=%^sum:~-%numdeci%,%numdeci%%% ! if %numdeci%==0 && set /a integer=%sum%
set maxdeci=19
if %numdeci%>=%maxdeci% && set numdeciO=%numdeci% && set /a numdeci=%maxdeci% - 1 &; call set decimals=%^decimals:~0,%maxdeci%%% &; if not %decimals:~-1,1%==0 && set rounded=Y
if exist numdeciO && if not %numdeci%>=%numdeciO% &; if %decimals:~-1,1%>=5 && set /a decimal=%decimals:~0,-1% + 1 && set lastrnd=1 ! set decimal=%decimals:~0,-1% && set lastrnd=0 &; set decimal=000000000000000000%decimal% &; call set decimals=%^decimal:~-%numdeci%,%numdeci%%% && call set round=%^decimal:~0,-%numdeci%%% &; if %round%>=1 && set /a integer=%integer% + %round%
#CENTRAL#if exist decimals && if not exist fix && call :stripzerosafter "%decimals%" &; set decimals=%result% && set result=
if %remainer%==-%number2% && set remainer=0
if not %remainer%==0 && set rounded=Y
if exist decimals && set quotient=%integer%.%decimals% ! set quotient=%integer%
set sign=- &; if not "%sign1%"=="-1" && if not "%sign2%"=="-1" && set sign= ! if "%sign1%"=="-1" && if "%sign2%"=="-1" && set sign=
set result=%sign%%%quotient%
goto :endlocal

:longerdivider
#NOT?#if not %decidiff%>=0 && set decimal1=%decimal1%%000000000000000000 &; call set decimal1=%^decimal1:~0,%numdeci2%%% && set numdeci=%numdeci2%
#NOT?#if %decidiff%>=1 && set decimal2=%decimal2%%000000000000000000 &; call set decimal2=%^decimal2:~0,%numdeci1%%% && set numdeci=%numdeci1%
#NOT#if not %numdeci1%>=%numdeci2% && set numdeci=%numdeci2% ! set numdeci=%numdeci2%
if exist decimal1 && set number1=%N1%.%decimal1% ! set number1=%N1%
if exist decimal2 && set number2=%N2%.%decimal2% ! set number2=%N2%
set N1=%N1% &; set /a N1len=%@retval% && if %N1%==0 && set N1len=0
set N2=%N2% &; set /a N2len=%@retval% && if %N2%==0 && set N2len=0
set numdeci=0
if %N1%==0 && if %numdeci1%>=1 && set /a decimalA=%decimal1% &; set /a numdeciA=%@retval% &; set /a numdeci=%numdeci% + %numdeci1% - %numdeciA% && set decimal1=%decimalA%
if %N2%==0 && if %numdeci2%>=1 && set /a decimalB=%decimal2% &; set /a numdeciB=%@retval% &; set /a numdeci=%numdeci% - %numdeci2% + %numdeciB% && set decimal2=%decimalB%
if not %numdeci%>=0 && set numdeci0=%numdeci% ! set numdeci0=0
if %N1%>=1 && set N1=%N1% &; set /a N1len=%@retval%
if exist N1 &; if %N1len%>=2 && set /a factor1=%N1len% - 1 ! set factor1=0
if not %N1len%<=%N2len% && set /a N=%N1:~0,1% && set N1=%N1:~1%
if %N1len%<=%N2len% && set N=%N1% && set N1= && set factor1=0 && set decimals=%decimal1% && set decimal1=
:longerdividendloop
if not %N%>=%N2% &; if exist N1 && set /a N=%N%%%N1:~0,1% && set N1=%N1:~1% ! if exist decimal1 && set /a N=%N%%%decimal1:~0,1% && set decimal1=%decimal1:~1% && set /a numdeci=%numdeci% + 1 ! if exist decimals && set /a N=%N%%%decimals:~0,1% && set decimals=%decimals:~1%%0 && set /a numdeci=%numdeci% + 1 ! set /a N=%N%%0 && set /a numdeci=%numdeci% + 1 &; if %N%<=0x7FFFFFFFFFFFFFFF && set /a factor1=%factor1% - 1 && goto :longerdividendloop ! set "message=Longer Division out of range" && goto :endlocal
:longerdividendloop1
if not exist N1 && if not exist decimals && if exist decimal1 && set decimals=%decimal1% && set decimal1=
if not exist N1 && call :">=" ">=" "%N%.%decimals%" "%number2%" &; if %result%==0 &; if exist decimal1 && set /a N=%N%%%decimal1:~0,1% && set decimal1=%decimal1:~1% && set /a numdeci=%numdeci% + 1 ! if exist decimals && set /a N=%N%%%decimals:~0,1% && set decimals=%decimals:~1%%0 && set /a numdeci=%numdeci% + 1 ! set /a N=%N%%0 && set /a numdeci=%numdeci% + 1 &; if %N%<=0x7FFFFFFFFFFFFFFF && set /a factor1=%factor1% - 1 && set result= && goto :longerdividendloop1 ! set "message=Longer Division out of range" && goto :endlocal
if exist N1 && call :">=" ">=" "%N%" "%number2%" &; if %result%==0 &; set /a N=%N%%%N1:~0,1% && set N1=%N1:~1% &; set /a factor1=%factor1% - 1 && set result= && goto :longerdividendloop1
set D=0
if not exist N1 && if %result%==1 && set result= && call :- - "%N%.%decimals%" "%number2%" &; if exist result && set remainer=%result% && set D=1 && set result= ! goto :endlocal
if exist N1 && if %result%==1 && set result= && call :- - "%N%" "%number2%" &; if exist result && set remainer=%result% && set D=1 && set result= ! goto :endlocal
if %factor1%<=-1 && set factor1=0
set /a maxdeci=19 + %factor1%
if not %divloops%<=%maxloops% && set /a maxloops=%maxloops% + 19 && set end=Y
goto :longerdividerloop
:longerdividendloop2
if %N1%>=1 && set decimals=%decimals%%0 && set comma=Y
if not %N1%>=1 && if exist decimal1 && set decimals=%decimals%%%decimal1:~0,1% && set decimal1=%decimal1:~1% && set comma=Y
if not %N1%>=1 && if not exist decimal1 && set decimals=%decimals%%0 && set comma=Y
set /a numdeci=%numdeci% + 1
set /a N=%N%%%decimals:~0,1% && set decimals=%decimals:~1%
call :">=" ">=" "%N%.%decimals%" "%number2%" &; if %result%==0 && set sum=%sum%%0 && if not %numdeci%>=%maxdeci% && set result= && goto :longerdividendloop2
set D=0
if %result%==1 && call :- - "%N%.%decimals%" "%number2%" &; if exist result && set remainer=%result% && set D=1 && set result= ! goto :endlocal
if %result%==0 && if %numdeci%==%maxdeci% && goto :longerdividerend
set result=
:longerdividerloop
if exist remainer && call :">=" ">=" "%remainer%" "%number2%" &; if %result%==1 && set result= && call :- - "%remainer%" "%number2%" &; if exist result && set remainer=%result% && set /a D=%D% + 1 && set result= && goto :longerdividerloop ! goto :endlocal
if %result%==0 && set sum=%sum%%%D% &; set /a sumlen=%@retval%
if exist remainer && if not %numdeci%>=%maxdeci% && call :splitnumber "%remainer%" &; set /a divloops=%divloops% + 1 && set remainer= && goto :longerdividendloop2
:longerdividerend
if not exist remainer && call :- - "%N%.%decimals%" "%number2%" &; if exist result && set remainer=%result% && set result= &; call :"==" "==" "%remainer%" "-%number2%" &; if %result%==1 && set remain=0 && set remainer= && set result= ! set remainer= && set result=
set sum=%sum% &; set /a sumlen=%@retval% && if not exist sum && set sumlen=0
set sum=0000000000000000000%sum%
set /a numdeci=%numdeci% - %numdeci0%
if %numdeci%>=1 && call set /a integer=%^sum:~0,-%numdeci%%% && call set decimals=%^sum:~-%numdeci%,%numdeci%%% ! call set /a integer=%sum%
if not %numdeci%>=0 && set zeros=0000000000000000000 && set /a numzeros=-1 * %numdeci% &; call set zeros=%^zeros:~0,%numzeros%%% &; set /a integer=%integer%%%zeros%
if exist N1 && if not exist division && set division=0
if %factor1%>=1 && call :shiftcomma "%integer%.%decimals%" "%factor1%" &; if exist N && set integer=%N% && set N= ! set rounded= && set "message=Multiplying in Long Division out of range" && goto :endlocal
if exist N1 && set factor1=
set maxdeci=19
if exist division && call :summing "%integer%.%decimals%" "%division%" &; if exist N && set division=%N%.%decimals% && set N= && set decimals= ! set rounded= && set "message=Summation in Long Divider out of range" && goto :endlocal
if exist N1 && set N1=%N1% &; set /a N1len=%@retval%
if exist N1 &; if %N1len%>=2 && set /a factor1=%N1len% - 1 ! set factor1=0
if %N1%>=10 && set numdeci=0 && set /a maxdeci=19 + %factor1% && set /a N=%N1:~0,1% && set N1=%N1:~1% && set decimals= && set sum= && goto :longerdividendloop
if %N1%>=1 && set numdeci=0 && set maxdeci=19 && set /a N=%N1% && set N1= && set decimals= && set sum= && goto :longerdividendloop1
if %N1%==0 && if exist decimal1 && set numdeci=0 && set maxdeci=19 && set N=0 && set N1= && set decimals= && set sum= && goto :longerdividendloop1
if exist division && call :"==" "==" "%division%" "0" &; if %result%==0 && set result= && call :splitnumber "%division%" &; set integer=%N% && set decimals=%decimals%
if exist decimals && set decimals=%decimals% &; set /a numdeci=%@retval%
if %numdeci%>=%maxdeci% && set numdeciO=%numdeci% && set /a numdeci=%maxdeci% - 1 && call set decimals=%^decimals:~0,%maxdeci%%% &; if not %decimals:~-1,1%==0 && set rounded=Y
if exist numdeciO && if not %numdeci%>=%numdeciO% &; if %decimals:~-1,1%>=5 && set /a decimal=%decimals:~0,-1% + 1 && set lastrnd=1 ! set /a decimal=%decimals:~0,-1% && set lastrnd=0 &; set decimal=000000000000000000%decimal% &; call set decimals=%^decimal:~-%numdeci%,%numdeci%%% && call set round=%^decimal:~0,-%numdeci%%% &; if %round%>=1 && set /a integer=%integer% + %round%
#CENTRAL#if exist decimals && if not exist fix && call :stripzerosafter "%decimals%" &; set decimals=%result% && set result=
if not %rounded%==Y && if not exist remainer && if not %remain%==0 && set rounded=Y
if not %rounded%==Y && if exist remainer && call :"==" "==" "%remainer%" "0" &; if %result%==0 && set rounded=Y && set result= ! set result=
if exist decimals && set quotient=%integer%.%decimals% ! set quotient=%integer%
set sign=- &; if not "%sign1%"=="-1" && if not "%sign2%"=="-1" && set sign= ! if "%sign1%"=="-1" && if "%sign2%"=="-1" && set sign=
set result=%sign%%%quotient%
goto :endlocal

:summing
setlocal && set * && set maxdeci=%maxdeci%
set N1=%~n1 &; if not exist N1 && set N1=0 ! if "%N1:~0,1%"=="-" && set "sign1=-" && set N1=%N1:~1%
set decimal1=%~x1 &; set decimal1=%decimal1:~1% &; set /a numdeci1=%@retval% && if not exist decimal1 && set numdeci1=0
set N2=%~n2 &; if not exist N2 && set N2=0 ! if "%N2:~0,1%"=="-" && set "sign2=-" && set N2=%N2:~1%
set decimal2=%~x2 &; set decimal2=%decimal2:~1% &; set /a numdeci2=%@retval% && if not exist decimal2 && set numdeci2=0
if %numdeci1%==0 && if %N1%==0 && endlocal && set N=%N2% && set decimals=%decimal2% && set numdeci=%numdeci2% && goto :eof
if %numdeci2%==0 && if %N2%==0 && endlocal && set N=%N1% && set decimals=%decimal1% && set numdeci=%numdeci1% && goto :eof
if not %numdeci1%>=%numdeci2% && set numdeci=%numdeci2% ! set numdeci=%numdeci1%
if %numdeci%==0 && set /a N=%N1% + %N2% &; endlocal && set N=%N% && set decimals= && set numdeci=0 && goto :eof
if %numdeci%>=1 && set decimal1=%decimal1%%00000000000000000000000000000000000000
if %numdeci%>=1 && set decimal2=%decimal2%%00000000000000000000000000000000000000
if not %numdeci%<=%maxdeci% && set numdeci=%maxdeci%
call set decimal1=%^decimal1:~0,%numdeci%%%
call set decimal2=%^decimal2:~0,%numdeci%%%
if not %numdeci%<=17 && set /a taillen=%numdeci% - 17 && set /a taildeci=%decimal1:~17% + %decimal2:~17% &; set taildeci=00%taildeci% &; call set /a deci17=%^taildeci:~0,-%taillen%%% && call set taildeci=%^taildeci:~-%taillen%,%taillen%%%
if not %numdeci%<=17 && set /a decimals=%decimal1:~0,17% + %decimal2:~0,17% + %deci17% &; set decimals=00000000000000000%decimals% &; set /a N=%N1% + %N2% + %decimals:~0,-17% && set decimals=%decimals:~-17,17% &; set decimals=%decimals%%%taildeci%
if %numdeci%<=17 && set /a decimals=%decimal1% + %decimal2% &; set decimals=00000000000000000%decimals% &; call set /a N=%N1% + %N2% + %^decimals:~0,-%numdeci%%% && call set decimals=%^decimals:~-%numdeci%,%numdeci%%%
endlocal && set N=%N% && set decimals=%decimals% && set numdeci=%numdeci%
goto :eof

:shiftcomma
setlocal && set *
set N=%~n1 &; if not exist N && set N=0 ! if "%N:~0,1%"=="-" && set "sign=-" && set N=%N:~1%
set decimals=%~x1 &; set decimals=%decimals:~1%
set shift=%~2
if %shift%>=1 && set decimals=%decimals%%0000000000000000000 &; set /a numdecis=%@retval%
if %shift%>=1 &; if exist decimals && call set N=%N%%%^decimals:~0,%shift%%% && call set decimals=%^decimals:~%shift%%%
if %shift%>=1 &; if not %decimals%==0 && set decimals=%decimals:~0,19% && set numdeci=19 ! set decimals= && set numdeci=0
if %shift%>=1 && endlocal && set N=%N% && set decimals=%decimals% && set numdeci=%numdeci% && goto :eof
if exist decimals && set /a numdeci=%@retval% ! set numdeci=0
set sum=0000000000000000000%N%%%decimals% &; set /a numints=%@retval%
set /a numdeci=%numdeci% - %shift% &; if %numdeci%>=1 && call set /a N=%^sum%:~0,-%numdeci%%% && call set decimals=%^sum:~-%numdeci%,%numdeci%%%
if not %decimals%==0 && set decimals=%decimals:~0,19% && set numdeci=19 ! set decimals= && set numdeci=0
echo %0 && set
endlocal && set N=%N% && set decimals=%decimals% && set numdeci=%numdeci%
goto :eof

:splitnumber
setlocal
set N=
set decimals=
set N=%~n1 &; if not exist N && set N=0 ! if "%N:~0,1%"=="-" && set "sign=-" && set N=%N:~1%
set decimals=%~x1 &; set decimals=%decimals:~1% &; set /a numdecis=%@retval% && if not exist decimals && set numdecis=0
endlocal && set N=%N% && set decimals=%decimals% && set numdecis=%numdecis%
goto :eof

:^
#-#+ ^ \tOperator  ^ : Decimal exponentation of base number1 and power number2
#-# Use\tCALCD.G4B [switch] number1 ^ number2\nRemarks\tInfix operator, existing result can be used instead of number1\n\tNegative base allowed, negative or broken power unsupported\n\tInternally 73 digits, 19th decimal is used for rounding\n\tHighest base: 3,037,000,499.976049692286752403 (power: 2)\nExample CALCD.G4B 2 ^ 8\nExample CALCD.G4B -2 ^ 8\nExample CALCD.G4B 1.02 ^ 35\nExample CALCD.G4B 5.0512 ^ 2\nExample CALCD.G4B -3 ^ 3\nExample CALCD.G4B 0.0123456789 ^ 5\nExample CALCD.G4B 1k ^ 6 THSEP\nExample CALCD.G4B 1.0123456789 ^ 3,558 THSEP\nExample CALCD.G4B 3,037,000,499.976049692286752403 ^ 2 HEX\nExample CALCD.G4B 3,037,000,499.976049692286752403 ^ 2 ROUND 0 HEX\nExample CALCD.G4B /echoR 0.0123456789 ^ 5 M 0.0123456789 ^ 4 M- MR
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
if /i "%~1"=="noround" && set noround=Y && set lastrnd= ! set noround=N
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call Fn.11 "%n2%" "/" && set "message=Abort %0: broken power '%~2' unsupported" && goto :endlocal
call Fn.11 "%n2%" "-" && set "message=Abort %0: inverse exponentation with power '%~2' unsupported" && goto :endlocal
if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if exist decimal2 && set "message=Abort %0: broken power '%N2%.%decimal2%' unsupported" && goto :endlocal
set power=%N2% && set N2=
if %power%==0 && if not %rounded%==Y && set result=1 && goto :endlocal
if %power%==1 && set result=%~1 && goto :endlocal
if %N1%==0 && if %numdeci1%==0 && set result=1 && goto :endlocal
set orgpower=%power%
if %numdeci1%==0 && set N2=%N1% && goto :calcpowerloop2
set N1=000000000000000000000000000%N1%
set d1=%decimal1%%000000000000000000000000000000000000000000000000000000 && set decimal1= && set numdeci1=
set * && set rounded=%rounded% && set power=%power% && set orgpower=%orgpower% && set N1=%N1% && set d1=%d1% && set sign1=%sign1% && set noround=%noround%
set /a N1C=%N1:~-27,9% && set /a N1B=%N1:~-18,9% && set /a N1A=%N1:~-9,9% && set N1=
set N2C=%N1C% && set N2B=%N1B% && set N2A=%N1A%
set d1A=%d1:~0,9% && set d1B=%d1:~9,9% && set d1C=%d1:~18,9% && set d1D=%d1:~27,9% && set d1E=%d1:~36,9% && set d1F=%d1:~45,9%
set d2A=%d1A% && set d2B=%d1B% && set d2C=%d1C% && set d2D=%d1D% && set d2E=%d1E% && set d2F=%d1F%
:calcpowerloop
setlocal
#NOTNEEDED# && set * && set N1A=%N1A% && set N2A=%N2A% && set d1A=%d1A% && set d2A=%d2A% && set d1B=%d1B% && set d2B=%d2B% && set d1C=%d1C% && set d2C=%d2C% && set d1D=%d1D% && set d2D=%d2D% && set d2E=%d2E% && set d2F=%d2F%
set /a N1Ad2F=%N1A% * %d2F%
set /a N2Ad1F=%N2A% * %d1F%
set /a d1Ad2E=%d1A% * %d2E%
set /a d2Ad1E=%d2A% * %d1E%
set /a d1Bd2D=%d1B% * %d2D%
set /a d2Bd1D=%d2B% * %d1D%
set /a d1Cd2C=%d1C% * %d2C%
set /a SumEm54=%N1Ad2F% + %N2Ad1F% + %d1Ad2E% + %d2Ad1E% + %d1Bd2D% + %d2Bd1D% + %d1Cd2C%
set d1d2m54=%SumEm54:~-9,9% && set /a SEm54p9=%SumEm54:~0,-9%
set d1d2m54=000000000%d1d2m54%
set d1d2m54=%d1d2m54:~-9,9%
endlocal && set d1d2m54=%d1d2m54% && set SEm54p9=%SEm54p9%
setlocal
set /a N1Bd2F=%N1B% * %d2F%
set /a N2Bd1F=%N2B% * %d1F%
set /a N1Ad2E=%N1A% * %d2E%
set /a N2Ad1E=%N2A% * %d1E%
set /a d1Ad2D=%d1A% * %d2D%
set /a d2Ad1D=%d2A% * %d1D%
set /a d1Bd2C=%d1B% * %d2C%
set /a d2Bd1C=%d2B% * %d1C%
set /a SumEm45=%N1Bd2F% + %N2Bd1F% + %N1Ad2E% + %N2Ad1E% + %d1Ad2D% + %d2Ad1D% + %d1Bd2C% + %d2Bd1C% + %SEm54p9%
set d1d2m45=%SumEm45:~-9,9% && set /a SEm45p9=%SumEm45:~0,-9%
set d1d2m45=000000000%d1d2m45%
set d1d2m45=%d1d2m45:~-9,9%
endlocal && set d1d2m45=%d1d2m45% && set SEm45p9=%SEm45p9% && set SEm54p9=
setlocal
set /a N1Cd2F=%N1C% * %d2F%
set /a N2Cd1F=%N2C% * %d1F%
set /a N1Bd2E=%N1B% * %d2E%
set /a N2Bd1E=%N2B% * %d1E%
set /a N1Ad2D=%N1A% * %d2D%
set /a N2Ad1D=%N2A% * %d1D%
set /a d1Ad2C=%d1A% * %d2C%
set /a d2Ad1C=%d2A% * %d1C%
set /a d1Bd2B=%d1B% * %d2B%
set /a SumEm36=%N1Cd2F% + %N2Cd1F% + %N1Bd2E% + %N2Bd1E% + %N1Ad2D% + %N2Ad1D% + %d1Ad2C% + %d2Ad1C% + %d1Bd2B% + %SEm45p9%
set d1d2m36=%SumEm36:~-9,9% && set /a SEm36p9=%SumEm36:~0,-9%
set d1d2m36=000000000%d1d2m36%
set d1d2m36=%d1d2m36:~-9,9%
endlocal && set d1d2m36=%d1d2m36% && set SEm36p9=%SEm36p9% && set SEm45p9=
setlocal
set /a N1Cd2E=%N1C% * %d2E%
set /a N2Cd1E=%N2C% * %d1E%
set /a N1Bd2D=%N1B% * %d2D%
set /a N2Bd1D=%N2B% * %d1D%
set /a N1Ad2C=%N1A% * %d2C%
set /a N2Ad1C=%N2A% * %d1C%
set /a d1Ad2B=%d1A% * %d2B%
set /a d2Ad1B=%d2A% * %d1B%
set /a SumEm27=%N1Cd2E% + %N2Cd1E% + %N1Bd2D% + %N2Bd1D% + %N1Ad2C% + %N2Ad1C% + %d1Ad2B% + %d2Ad1B% + %SEm36p9%
set d1d2m27=%SumEm27:~-9,9% && set /a SEm27p9=%SumEm27:~0,-9%
set d1d2m27=000000000%d1d2m27%
set d1d2m27=%d1d2m27:~-9,9%
if %power%==2 && if %noround%==N &; if %d1d2m27:~-9,1%>=5 && set /a SEm27p9=%SEm27p9% + 1 && set lastrnd=1 ! set lastrnd=0
#org#if %power%==2 &; if %d1d2m27:~-9,1%>=5 && set /a SEm27p9=%SEm27p9% + 1 && set lastrnd=1 ! set lastrnd=0
endlocal && set d1d2m27=%d1d2m27% && set SEm27p9=%SEm27p9% && set lastrnd=%lastrnd% && set SEm36p9=
setlocal
set /a N1Cd2D=%N1C% * %d2D%
set /a N2Cd1D=%N2C% * %d1D%
set /a N1Bd2C=%N1B% * %d2C%
set /a N2Bd1C=%N2B% * %d1C%
set /a N1Ad2B=%N1A% * %d2B%
set /a N2Ad1B=%N2A% * %d1B%
set /a d1Ad2A=%d1A% * %d2A%
set /a SumEm18=%N1Cd2D% + %N2Cd1D% + %N1Bd2C% + %N2Bd1C% + %N1Ad2B% + %N2Ad1B% + %d1Ad2A% + %SEm27p9%
set d1d2m18=%SumEm18:~-9,9% && set /a SEm18p9=%SumEm18:~0,-9%
set d1d2m18=000000000%d1d2m18%
set d1d2m18=%d1d2m18:~-9,9%
endlocal && set d1d2m18=%d1d2m18% && set SEm18p9=%SEm18p9% && set SEm27p9=
setlocal
set /a N1Cd2C=%N1C% * %d2C%
set /a N2Cd1C=%N2C% * %d1C%
set /a N1Bd2B=%N1B% * %d2B%
set /a N2Bd1B=%N2B% * %d1B%
set /a N1Ad2A=%N1A% * %d2A%
set /a N2Ad1A=%N2A% * %d1A%
set /a SumEm9=%N1Cd2C% + %N2Cd1C% + %N1Bd2B% + %N2Bd1B% + %N1Ad2A% + %N2Ad1A% + %SEm18p9%
set d1d2m9=%SumEm9:~-9,9% && set /a SEm9p9=%SumEm9:~0,-9%
set d1d2m9=000000000%d1d2m9%
set d1d2m9=%d1d2m9:~-9,9%
endlocal && set d1d2m9=%d1d2m9% && set SEm9p9=%SEm9p9% && set SEm18p9=
setlocal
set /a N1Cd2B=%N1C% * %d2B%
set /a N2Cd1B=%N2C% * %d1B%
set /a N1Bd2A=%N1B% * %d2A%
set /a N2Bd1A=%N2B% * %d1A%
set /a N1AN2A=%N1A% * %N2A%
set /a SumEp0=%N1Cd2B% + %N2Cd1B% + %N1Bd2A% + %N2Bd1A% + %N1AN2A% + %SEm9p9%
set SumEp0=0000000000%SumEp0%
set N1N2p0=%SumEp0:~-9,9% && set /a SE0p9=%SumEp0:~0,-9%
set N1N2p0=000000000%N1N2p0%
set N1N2p0=%N1N2p0:~-9,9%
endlocal && set N1N2p0=%N1N2p0% && set SE0p9=%SE0p9% && set SEm9p9=
setlocal
set /a N1Cd2A=%N1C% * %d2A%
set /a N2Cd1A=%N2C% * %d1A%
set /a N1BN2A=%N1B% * %N2A%
set /a N2BN1A=%N2B% * %N1A%
set /a SumEp9=%N1Cd2A% + %N2Cd1A% + %N1BN2A% + %N2BN1A% + %SE0p9%
set SumEp9=0000000000%SumEp9%
set N1N2p9=%SumEp9:~-9,9% && set /a SE9p9=%SumEp9:~0,-9%
endlocal && set N1N2p9=%N1N2p9% && set SE9p9=%SE9p9% && set SE0p9=
setlocal
set /a N1B2B=%N1B% * %N2B%
set /a N1CN2A=%N1C% * %N2A%
set /a N2CN1A=%N2C% * %N1A%
set /a SumEp18=%N1B2B% + %N1CN2A% + %N2CN1A% + %SE9p9%
set SumEp18=000000000%SumEp18%
set N1N2p18=%SumEp18:~-9,9% && set /a SE18p9=%SumEp18:~0,-9%
endlocal && set N1N2p18=%N1N2p18% && set SE18p9=%SE18p9% && set SE9p9=
if not %N1N2p18%<=9 && set "message=Exponentation out of range" && goto :endlocal
if not %N1N2p18%<=9223372036 && if not %N1N2p9%<=854775807 && set "message=Exponentation out of range" && goto :endlocal
#BAD#if %N1N2p18%==9 && if %N1N2p9%>=223372035 && set "message=Exponentation out of range" && goto :endlocal
set /a power=%power% - 1 &; if %power%>=2 && set N1C=%N1N2p18% && set N1N2p18= && set N1B=%N1N2p9% && set N1N2p9= && set N1A=%N1N2p0% && set N1N2p0= && set d1A=%d1d2m9% && set d1d2m9= && set d1B=%d1d2m18% && set d1d2m18= && set d1C=%d1d2m27% && set d1d2m27= && set d1D=%d1d2m36% && set d1d2m36= && set d1E=%d1d2m45% && set d1d2m45= && goto :calcpowerloop
if not %d1d2m54%==0 && set rounded=Y ! if not %d1d2m45%==0 && set rounded=Y ! if not %d1d2m36%==0 && set rounded=Y ! if not %d1d2m27%==0 && set rounded=Y
if %d1d2m18%==0 && set d1d2m18=
if %noround%==Y && set lastrnd=%d1d2m27%%%d1d2m36%%%d1d2m45%
set resdec=%d1d2m9%%%d1d2m18% &; if %resdec%==0 && set resdec=
if %N1N2p18%>=1 && set /a N1N2p18=%N1N2p18%
if %N1N2p18%==0 && set N1N2p18= && set /a N1N2p9=%N1N2p9%
if %N1N2p18%==0 && if %N1N2p9%==0 && set N1N2p18= && set N1N2p9= && set /a N1N2p0=%N1N2p0%
set resint=%N1N2p18%%%N1N2p9%%%N1N2p0%
if %resint%==0 && set resint=0
set resdec=%resdec:~0,18%
if %resint%>=1 && call :stripzerosbefore "%resint%" &; set resint=%result% && set result=
goto :calcpowerloopend
:calcpowerloop2
if not %N1N2%<=0x7FFFFFFFFFFFFFFF && set "message=Exponentation out of range" && goto :endlocal
if %N1%>=0x4000000000000000 && set "message=Exponentation out of range" && goto :endlocal
set /a N1N2=%N1% * %N2% &; if %N1%>=0 && if %N1N2%<=0 && set "message=Exponentation out of range" && goto :endlocal
set /a power=%power% - 1 &; if %power%>=2 && set N1=%N1N2% && goto :calcpowerloop2 ! set resint=%N1N2%
:calcpowerloopend
if not %resint%<=0x7FFFFFFFFFFFFFFF && set "message=Exponentation out of range" && goto :endlocal
if exist resdec && if not exist fix && if %noround%==N && call :stripzerosafter "%resdec%" &; set resdeci=%result% && set result=
#CENTRAL#if exist resdec && if not exist fix && call :stripzerosafter "%resdec%" &; set resdeci=%result% && set result=
if "%sign1%"=="-1" && set sign=- &; calc %orgpower% % 2 || set sign=
if not exist resdec && if not %rounded%==Y && set result=%sign%%%resint% ! if exist resdec && set result=%sign%%%resint%.%resdec% ! set result=%sign%%%resint%
goto :endlocal

:sqrt
#-#+ SQRT \tFunction SQRT - Decimal square root of number before
#-# Use\tCALCD.G4B number SQRT\nRemarks\tPostfix function, existing result can be used instead of number\n\tInternally 38 digits, 19th decimal is used for rounding\nExample CALCD.G4B 10 SQRT\nExample CALCD.G4B 19.1844 SQRT\nExample CALCD.G4B 2050.456 SQRT\nExample CALCD.G4B 0x7FFFFFFFFFFFFFFF SQRT\nExample CALCD.G4B 1234567890987654321.123456789987654321 SQRT\nExample CALCD.G4B 256 * 256 SQRT ^ 2\nExample CALCD.G4B /echoR 123,456,789.123456789 SQRT SQRT SQRT SQRT ^ 16 round 9\nExample CALCD.G4B /echoR 256 SQRT M 4096 SQRT M+ MR
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~2"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% &; if exist message && goto :endlocal ! set n1=
if "%sign1%"=="-1" && set "message=Abort %0: negative number %sign1:~0,1%%%N1%" && goto :endlocal
set N1=%N1% &; set /a N1len=%@retval%
set /a N=%N1% &; set /a Nlen=%@retval% &; calc %Nlen% % 2 && set N=0%N% &; set /a Nlen=%@retval%
if exist decimal1 && set decimal=%decimal1% &; set /a decilen=%@retval% &; calc %decilen% % 2 && set decimal=%decimal%%0 && set /a decilen=%decilen% + 1
if exist decimal && set N=%N%%%decimal% && set /a decilen=%decilen% / 2 ! set decilen=0
set start2dg=%N:~0,2% && set N=%N:~2% &; set /a Nlen=%@retval%
set sqrt=9
:sqrtloop
set /a proxy=%sqrt% * %sqrt%
set /a remainer=%start2dg% - %proxy% &; if not %remainer%>=0 && set /a sqrt=%sqrt% - 1 && goto :sqrtloop
if not exist N &; if %remainer%>=1 && set N=000000000000000000000000000000000000 && set end=Y && set numdeci=1 ! set result=%sqrt% && goto :endlocal
set remainer=%remainer%%%N:~0,2% && set N=%N:~2%
set D=9
:calcsqrtloop
set /a proxy=20 * %sqrt% + %D% * %D%
#oke#set /a P=20 * %sqrt% && set /a sqrD=%D% * %D%
#oke#set /a proxy=%P% * %D% + %sqrD%
if not %proxy%<=%remainer% && set /a D=%D% - 1 && goto :calcsqrtloop ! set sqrt=%sqrt%%%D% && set /a remainer=%remainer% - %proxy% && set D=9
#NODIFF#if not exist N && if %remainer%>=1 && if not %end%==Y && set N=0000000000000000000000000000000000000 && set end=Y && set numdeci=0
if not exist N && if %remainer%>=1 && if not %end%==Y && set N=000000000000000000000000000000000000 && set end=Y && set numdeci=0
if exist N && if not %remainer%<=10248191152060862 && set remainer=%remainer%%%N:~0,2% && set N=%N:~2% &; if exist numdeci && set /a numdeci=%numdeci% + 1 ! set numdeci=0 &; set D=9 && goto :calclongsqrtloop
if not exist N && if %remainer%>=1 && set rounded=Y
if not exist N && if not %numdeci%>=1 && if not %decilen%>=1 && set integer=%sqrt% && goto :calcsqrtend
if not exist N && if not %numdeci%>=1 && if %decilen%>=1 && set numdeci=%decilen% &; call set integer=%^sqrt:~0,-%numdeci%%% && call set decimals=%^sqrt:~-%numdeci%,%numdeci%%% && goto :calcsqrtend
if not exist N && if %numdeci%>=1 && set /a numdeci=%numdeci% + %decilen% &; call set integer=%^sqrt:~0,-%numdeci%%% && call set decimals=%^sqrt:~-%numdeci%,%numdeci%%% && goto :calcsqrtend
set remainer=%remainer%%%N:~0,2% && set N=%N:~2%
if %end%==Y && set /a numdeci=%numdeci% + 1
goto :calcsqrtloop
:calcsqrtend
if %numdeci%>=19 && set decimals=%decimals:~0,19% && set numdeci=19
if not %remainer%==0 && if exist decimals &; if %decimals:~-1,1%>=5 && set round=1 && set lastrnd=1 ! set round=0 && set lastrnd=0 &; set decimals=%decimals:~0,-1% && set /a numdeci=%numdeci% - 1 &; set /a decimals=%decimals% + %round% &; set decimals=00000000000000000000000000000000000000%decimals% &; call set /a integer=%integer% + %^decimals:~0,-%numdeci%%% && call set decimals=%^decimals:~-%numdeci%,%numdeci%%%
#CENTRAL??#if exist decimals && if not exist fix && call :stripzerosafter "%decimals%" &; set decimals=%result% && set result=
if exist decimals && set result=%integer%.%decimals% ! set result=%integer%
goto :endlocal

:calclongsqrtloop
set /a Dx20=20 * %D%
set /a Dexp2=%D% * %D%
set /a proxylo=%Dx20% * %sqrt:~-16,16%
set /a carry=%proxylo:~0,-16%
set /a proxylo=%proxylo:~-16,16% + %Dexp2%
set proxylo=00000000000000000%proxylo% &; set proxylo=%proxylo:~-16,16%
set /a sqrthi=%sqrt:~0,-16%
set /a proxyhi=%Dx20% * %sqrthi% + %carry%
set proxy=%proxyhi%%%proxylo% &; set /a proxylen=%@retval%
set remainer=%remainer% &; set /a remainln=%@retval%
#ORG#set /a proxy=20 * %sqrt% + %D% * %D%
set greater=
set remainlo=%remainer:~-16,16%
set remainhi=%remainer:~0,-16%
if %proxyhi%==%remainhi% && set equal=Y ! set equal=N
if not %equal%==Y &; if not %proxyhi%<=%remainhi% && set greater=Y ! set greater=N
if %equal%==Y &; if not %proxylo%<=%remainlo% && set greater=Y ! set greater=N
if %greater%==Y && set /a D=%D% - 1 && goto :calclongsqrtloop
set sqrt=%sqrt%%%D%
set /a remainlo=%remainer:~-16,16% - %proxy:~-16,16%
if %remainlo%<=-1 && set /a remainlo=1%remainer:~-16,16% - %proxy:~-16,16% && set lend=1 ! set lend=0
set remainlo=00000000000000000%remainlo% &; set remainlo=%remainlo:~-16,16%
set /a remainer=%remainer:~0,-16% && set /a proxy=%proxy:~0,-16%
set /a remainhi=%remainer% - %lend% - %proxy%
set remainer=%remainhi%%%remainlo% &; set /a remainln=%@retval%
if not exist end2 && if not exist N && set N=0000000000000000000000000000 && set end2=Y && if not exist numdeci && set numdeci=0
if %remainer%==0 && set N=
if %numdeci%>=19 && set N=
if %remainln%>=32 && set N=
if not exist N && if not %remainer%==0 && set rounded=Y
if not exist N && if not %numdeci%>=1 && if not %decilen%>=1 && set integer=%N% && goto :calcsqrtend
if not exist N && if not %numdeci%>=1 && if %decilen%>=1 && set numdeci=%decilen% &; set sqrt=%N%%%decimals% &; call set integer=%^sqrt:~0,-%numdeci%%% && call set decimals=%^sqrt:~-%numdeci%,%numdeci%%% && goto :calcsqrtend
if not exist N && if %numdeci%>=1 && set /a numdeci=%numdeci% + %decilen% &; call set integer=%^sqrt:~0,-%numdeci%%% && call set decimals=%^sqrt:~-%numdeci%,%numdeci%%% && goto :calcsqrtend
set remainer=%remainer%%%N:~0,2% && set N=%N:~2%
if not %end%==Y if not %end2%==Y || set /a numdeci=%numdeci% + 1
set D=9 && set greater= && set equal=
goto :calclongsqrtloop

:sum
#-#+ SUM \tFunction SUM - Sum of numbers behind
#-# Use 1\tCALCD.G4B SUM number1 number2 [number3 ...]\nUse 2\tCALCD.G4B SUM MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B SUM 1 2 3\nExample CALCD.G4B SUM 1 -2 3\nExample CALCD.G4B SUM 1 2 3 / 3\nExample CALCD.G4B 4! M SUM 1! 2! 3! MR 5!\nExample CALCD.G4B SUM 1 2 3 / 3 M SUM 1 2 3 4 / 4 M+ MR\nExample CALCD.G4B SUM MD (md)0x3000+255\nExample CALCD.G4B SUM MD (md)0x3000+255 * 0.7\nExample CALCD.G4B SUM MD (md)0x3000+255 M 2.5 * MR M+ MR
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if %~1==goback && set goback=Y
if "%~3"=="" &; if %goback%==Y && endlocal && set "message=Abort: argument(s) missing in SUM" && goto :eof ! endlocal && set "message=Abort: argument(s) missing in SUM" && goto :calcfpend
shift
if /i %~1==md &; if %~d2==(md) && set md=%~2 && shift && shift ! if %goback%==Y && endlocal && set "message=Abort SUM: (md)-device in '%~2' not found" && set result= && goto :eof ! endlocal && set "message=Abort: (md)-device in '%~2' not found" && goto :calcfpend
if exist md &; call Fn.11 "%md%" "+" |; if %goback%==Y && endlocal && set "message=Abort SUM: (md)-device in '%md%' not valid" && set result= && goto :eof ! endlocal && set "message=Abort: (md)-device in '%md%' not valid" && goto :calcfpend
if exist md && if %md:~-3,3%>=256 &; if %goback%==Y && endlocal && set "message=Abort SUM: sectors of (md)-device in '%md%' above 255" && set result= && goto :eof ! endlocal && set "message=Abort: sectors of (md)-device in '%md%' above 255" && goto :calcfpend
if not exist md && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N1%==r && set N1=%R% ! if /i %N1%==-r && set N1=-%R%
if not exist md && set N2=%~2 &; if /i %N2:~-2,2%==mr && set N2=%N2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N2%==r && set N2=%R% ! if /i %N2%==-r && set N2=-%R%
if not exist md && call :+ + %N1% %N2% &; if exist result && if not "%~3"=="" && shift && shift && goto :sumloop ! if %goback%==Y && endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && goto :eof ! endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && goto :calcfpend
cat %md% | call :sumloop  &; if "%~1"=="" &; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfpend
#org#cat %md% | call :sumloop  &; if "%~1"=="" &; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfpend
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if %goback%==Y && endlocal && set "message=%message%" && set result=%result% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set "message=%message%" && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfpend
:sumloop
if exist md && if "%~1"=="" && goto :eof
if exist md && if exist result && call :+ + %result% %~1 &; if not exist result && goto :eof
if exist md && if not exist result && call :+ + %~1 %~2 &; shift && if not exist result && goto :eof
if exist md && shift && goto :sumloop
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="" && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd%
if not "%~1"=="" && call :+ + %result% %N1% &; if exist result && shift ! endlocal && set "message=%message%" && set result= && goto :eof
if not "%~1"=="" && goto :sumloop
if %goback%==Y && endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof
endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && set "message=%message%"
goto :calcfpend

:count
#-#+ COUNT \tFunction COUNT - Count of argument(s) behind
#-# Use 1\tCALCD.G4B COUNT ARG1 [ARG2 ...]\nUse 2\tCOUNT MD FILE\nRemarks Prefix function, counting is ended by \\\\\n\tResult can be used as input to infix or postfix functions\n\tNew prefix function after \\\\ restarts calculation\n\tFILE must be an md-device, max 255 sectors (argument \\\\ ends COUNT)\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B COUNT 1 2 3 a B C * - + ^ / inv sqrt words symbols\nExample CALCD.G4B COUNT 1 2 3 a B C * - + ^ / inv sqrt words \\\\ - 3\nExample CALCD.G4B COUNT 1 2 3 a B C * - + ^ / inv sqrt words \\\\ M 3 / MR\nExample CALCD.G4B COUNT MD (md)0x3000+255\nExample CALCD.G4B COUNT MD (md)0x3000+255 / 8\nExample CALCD.G4B COUNT MD (md)0x3000+255 M SUM MD (md)0x3100+255 / MR
setlocal && set *
if %~1==goback && set goback=Y
if "%~2"=="" &; if %goback%==Y && endlocal && set "message=Abort: 'argument' is missing in COUNT" && goto :eof ! endlocal && set "message=Abort: 'argument' is missing in COUNT" && goto :calcfpend
shift
if /i %~1==md &; if %~d2==(md) && set md=%~2 && shift && shift ! if %goback%==Y && endlocal && set "message=Abort COUNT: (md)-device in '%~2' not found" && goto :eof ! endlocal && set "message=Abort COUNT: (md)-device in '%~2' not found" && goto :calcfpend
if exist md &; call Fn.11 "%md%" "+" |; if %goback%==Y && endlocal && set "message=Abort COUNT: (md)-device in '%md%' not valid" && goto :eof ! endlocal && set "message=Abort COUNT: (md)-device in '%md%' not valid" && goto :calcfpend
if exist md && if %md:~-3,3%>=256 &; if %goback%==Y && endlocal && set "message=Abort COUNT: sectors of (md)-device in '%md%' above 255" && goto :eof ! endlocal && set "message=Abort COUNT: sectors of (md)-device in '%md%' above 255" && goto :calcfpend
set count=0
if not exist md && goto :countloop
#USERMUSTDO#cat --locate== --number=1 %md% > nul && cat --locate== --replace=- %md% > nul
#USERMUSTDO#cat --locate=% --number=1 %md% > nul && cat --locate=% --replace=# %md% > nul
#USERMUSTDO#cat --locate=\x22 --number=1 %md% > nul && cat --locate=\x22 --replace=\x27 %md% > nul
cat %md% | call :countloop  &; if %count%>=1 && set result=%count% ! endlocal && set "message=%message%" && goto :eof
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && goto :eof ! endlocal && set result=%result% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && goto :eof ! endlocal && set result=%result% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; if %goback%==Y && endlocal && set result=%result% && goto :eof ! endlocal && set result=%result% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && goto :eof ! endlocal && set result=%result% && goto :calcfploop
if "%~1"=="\\" && shift
if %goback%==Y && endlocal && set "message=%message%" && set result=%result% && goto :eof ! endlocal && set "message=%message%" && set result=%result% && goto :calcfploop
:countloop
if "%~1"=="" && if exist md && goto :eof
set /a count=%count%+1 && shift
if exist md && goto :countloop ! if not "%~1"=="" && if not "%~1"=="\\" && goto :countloop
set result=%count%
if "%~1"=="\\" && shift &; if %goback%==Y && endlocal && set result=%result% && goto :eof ! endlocal && set result=%result% && goto :calcfploop
endlocal && set result=%result% && set "message=%message%"
goto :calcfpend

:mean
#-#+ MEAN \tFunction MEAN - Mean of numbers behind
#-#  Use 1\tCALCD.G4B MEAN number1 number2 [number3 ...]\nUse 2\tCALCD.G4B MEAN MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B MEAN 1 2 3 4 5 6\nExample CALCD.G4B MEAN 1 2 3 4 5 6 * 6\nExample CALCD.G4B MEAN 1 2 3 4 5 6 M MR * 6\nExample CALCD.G4B MEAN MD (md)0x3000+255\nExample CALCD.G4B MEAN MD (md)0x3000+255 SQRT
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if %~1==goback && set goback=Y
if "%~3"=="" &; if %goback%==Y && endlocal && set "message=Abort: argument(s) missing in MEAN" && goto :eof ! endlocal && set "message=Abort: argument(s) missing in MEAN" && goto :calcfpend
shift
if /i %~1==md &; if %~d2==(md) && set md=%~2 && shift && shift ! if %goback%==Y && endlocal && set "message=Abort MEAN: (md)-device in '%~2' not found" && set result= && goto :eof ! endlocal && set "message=Abort MEAN: (md)-device in '%~2' not found" && set result= && goto :calcfpend
if not exist md && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N1%==r && set N1=%R% ! if /i %N1%==-r && set N1=-%R%
if not exist md && set N2=%~2 &; if /i %N2:~-2,2%==mr && set N2=%N2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N2%==r && set N2=%R% ! if /i %N2%==-r && set N2=-%R%
if not exist md && set count=1 && call :+ + %N1% %N2% &; if exist result && set /a count=%count%+1 && shift && shift && goto :meanloop ! endlocal && set "message=%message%" && set result= && goto :eof
call Fn.11 "%md%" "+" |; if %goback%==Y && endlocal && set "message=Abort MEAN: (md)-device in '%md%' not valid" && set result= && goto :eof ! endlocal && set "message=Abort MEAN: (md)-device in '%md%' not valid" && set result= && goto :calcfpend
if %md:~-3,3%>=256 &; if %goback%==Y && endlocal && set "message=Abort MEAN: sectors of (md)-device in '%md%' above 255" && set result= && goto :eof ! endlocal && set "message=Abort MEAN: sectors of (md)-device in '%md%' above 255" && set result= && goto :calcfpend
call :sum goback md %md% &; if exist result && set sum=%result% && set result= ! if %goback%==Y && endlocal && set result= && set "message=%message%" && goto :eof ! endlocal && set result= && set "message=%message%" && goto :calcfpend
call :count goback md %md% &; if exist result && call :/ / %sum% %result% ! if %goback%==Y && endlocal && set "message=%message%" && set result= && goto :eof ! endlocal && set result= && set "message=%message%" && goto :calcfpend
if not exist result &; if %goback%==Y && endlocal && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && goto :calcfpend
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if %goback%==Y && endlocal && set result=%result% && set "message=%message%" && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set "message=%message%" && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfpend
:meanloop
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; call :/ / %result% %count% &; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; call :/ / %result% %count% &; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; call :/ / %result% %count% &; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; call :/ / %result% %count% &; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="" && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd%
if not "%~1"=="" && call :+ + %result% %N1% &; if exist result && set /a count=%count%+1 && shift && goto :meanloop ! endlocal && set "message=%message%" && set result= && goto :eof
call :/ / %result% %count%
if %goback%==Y && endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof
endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && set "message=%message%"
goto :calcfpend

:product
#-#+ PRODUCT \tFunction PRODUCT  - Product of numbers behind
#-#  Use 1\tCALCD.G4B PRODUCT number1 number2 [number3 ...]\nUse 2\tCALCD.G4B PRODUCT MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B PRODUCT 1 2 3 4 5 6\nExample CALCD.G4B PRODUCT 1 2 3 4 5 6 * 7\nExample CALCD.G4B PRODUCT 1! 2! 3! 4! 5! 6!\nExample CALCD.G4B 5! M PRODUCT 1! 2! 3! 4! MR 6! 7! / 8! THSEP\nExample CALCD.G4B PRODUCT 1 2 3 4 5 6 M PRODUCT 7 8 9 10 * MR\nExample CALCD.G4B PRODUCT MD (md)0x3000+255\nExample CALCD.G4B PRODUCT MD (md)0x3000+255 ^ 2\nExample CALCD.G4B PRODUCT MD (md)0x3000+255 M 20! / MR
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if %~1==goback && set goback=Y
if "%~3"=="" &; if %goback%==Y && endlocal && set "message=Abort: argument(s) missing in PRODUCT" && goto :eof ! endlocal && set "message=Abort: argument(s) missing in PRODUCT" && goto :calcfpend
shift
if /i %~1==md &; if %~d2==(md) && set md=%~2 && shift && shift ! if %goback%==Y && endlocal && set "message=Abort PRODUCT: (md)-device in '%~2' not found" && set result= && goto :eof ! endlocal && set "message=Abort PRODUCT: (md)-device in '%~2' not found" && set result= && goto :calcfpend
if exist md &; call Fn.11 "%md%" "+" |; if %goback%==Y && endlocal && set "message=Abort PRODUCT: (md)-device in '%md%' not valid" && set result= && goto :eof ! endlocal && set "message=Abort PRODUCT: (md)-device in '%md%' not valid" && set result= && goto :calcfpend
if exist md && if %md:~-3,3%>=256 &; if %goback%==Y && endlocal && set "message=Abort PRODUCT: sectors of (md)-device in '%md%' above 255" && set result= && goto :eof ! endlocal && set "message=Abort PRODUCT: sectors of (md)-device in '%md%' above 255" && set result= && goto :calcfpend
if not exist md && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N1%==r && set N1=%R% ! if /i %N1%==-r && set N1=-%R%
if not exist md && set N2=%~2 &; if /i %N2:~-2,2%==mr && set N2=%N2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N2%==r && set N2=%R% ! if /i %N2%==-r && set N2=-%R%
if not exist md && call :* * %N1% %N2% &; if exist result && if not "%~3"=="" && shift && shift && goto :productloop ! if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result=%result% && goto :calcfpend
cat %md% | call :productloop  &; if exist result && if "%~1"=="" && endlocal && set result=%result% && goto :calcfpend ! if not exist result && endlocal && set "message=%message%" && set result= && goto :calcfpend
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if %goback%==Y && endlocal && set result=%result% && set "message=%message%" && goto :eof ! endlocal && set result=%result% && set "message=%message%" && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfpend
:productloop
if exist md && if "%~1"=="" && goto :eof
if exist md && if exist result && call :* * %result% %~1 &; if not exist result && goto :eof
if exist md && if not exist result && call :* * %~1 %~2 &; shift && if not exist result && goto :eof
if exist md && shift && goto :productloop
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="" && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd%
if not "%~1"=="" && call :* * %result% %N1% &; if exist result && shift ! endlocal && set "message=%message%" && set result= && goto :calcfpend
if not "%~1"=="" && goto :productloop
if %goback%==Y && endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof
endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd%
goto :calcfpend

:fact
#-#+ FACT \tFunction FACT - Factorial of number behind
#-# Use \tCALCD.G4B FACT n\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tRange of integer n: from 0 up to 20 (highest result 20!)\nExample CALCD.G4B FACT 5\nExample CALCD.G4B FACT 8 / 7!\nExample CALCD.G4B 1 + 1 M FACT 2 INV + MR
setlocal && set * && set MR=%MR% && set R=%R%
if %~1==goback && set goback=Y
if "%~2"=="" &; if %goback%==Y && endlocal && set "message=Abort: argument 'number' is missing in FACT" && goto :eof ! endlocal && set "message=Abort: argument 'number' is missing in FACT" && goto :calcfpend
shift
set "ARG=%~1"
set number1=%~n1 && set decimal1=%~x1 && shift
if /i "%number1:~-1,1%"=="!" && set number1=%number1:~0,-1%
if exist decimal1 &; if %goback%==Y && endlocal && set "message=Abort FACT: no decimals allowed in factorials, check '%ARG%'" && goto :eof ! endlocal && set "message=Abort FACT: no decimals allowed in factorials, check '%ARG%'" && goto :calcfpend
if /i "%number1:~-2,2%"=="MR" && set number1=%MR% ! if /i "%number1%"=="R" && set number1=%R% ! if /i "%number1%"=="-R" && set number1=-%R%
call Fn.11 "%number1%" "." &; if %goback%==Y && endlocal && set "message=Abort FACT: no decimals allowed in factorials, check '%number1%'" && goto :eof ! endlocal && set "message=Abort FACT: no decimals allowed in factorials, check '%number1%'" && goto :calcfpend
if "%number1:~0,1%"=="+" && set number1=%number1:~1% && set sign=
if "%number1:~0,1%"=="-" && set number1=%number1:~1% && set "sign=-"
if /i "%number1:~-1,1%"=="!" && set number1=%number1:~0,-1%
if not exist number1 &; if %goback%==Y && endlocal && set "message=Abort FACT: number '%ARG%' is not valid" && set result= && goto :eof ! endlocal && set "message=Abort FACT: number '%ARG%' is not valid" && set result= && goto :calcfpend
if %number1%>=21 &; if %goback%==Y && endlocal && set "message=Abort FACT: factorial of '%number1%!' is too high" && set result= && goto :eof ! endlocal && set "message=Abort FACT: factorial of '%number1%!' is too high" && set result= && goto :calcfpend
if not %number1%==0 if not %number1%==1 || set result=1
if not %result%==1 && set /a number1=%number1% &; if %number1%==0 &; if %goback%==Y && endlocal && set "message=Abort FACT: bad input in '%ARG%'"&& goto :eof ! endlocal && set "message=Abort FACT: bad input in '%ARG%'" && goto :calcfpend
set /a number2=%number1%-1 &; if not %number2%>=0 && set result=1
if %result%==1 && if %goback%==Y && endlocal && set result=%sign%%%result% && goto :eof
if %result%==1 &; if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%sign%%%result% && goto :eof ! endlocal && set result=%sign%%%result% && goto :calcfploop
if %result%==1 &; if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set "message=%message%" && set result=%sign%%%result% && goto :eof ! endlocal && set result=%sign%%%result% && goto :calcfploop
if %result%==1 &; if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if %result%==1 && endlocal && set result=%sign%%%result% && goto :calcfpend
set /a result=%number1% * %number2% && set /a number2=%number2%-1 &; if not exist result &; if %goback%==Y && endlocal && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result= && goto :calcfpend
:facloop
if %number2%>=2 && set /a result=%result% * %number2% &; if exist result && set /a number2=%number2%-1 ! endlocal && set "message=%message%" && set result= && goto :calcfpend
if %number2%>=2 && goto :facloop
if %result%>=2 &; if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%sign%%%result% && set "message=%message%" && goto :eof ! endlocal && set result=%sign%%%result% && set "message=%message%" && goto :calcfploop
if %result%>=2 &; if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set "message=%message%" && set result=%sign%%%result% && goto :eof ! endlocal && set result=%sign%%%result% && set "message=%message%" && goto :calcfploop
if %result%>=2 &; if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; if %goback%==Y && endlocal && set result=%sign%%%result% && set "message=%message%" && goto :eof ! endlocal && set result=%sign%%%result% && set "message=%message%" && goto :calcfprestart
if %result%>=2 &; if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%sign%%%result% && goto :eof ! endlocal && set result=%sign%%%result% && goto :calcfploop
if %goback%==Y && endlocal && set "message=%message%" && set result=%sign%%%result% && goto :eof
endlocal && set result=%sign%%%result% && set "message=%message%"
goto :calcfpend

:inv
#-#+ INV \tFunction INV - Decimal inverse of number before
#-# Use\tCALCD.G4B number INV\nRemarks\tPostfix function, existing result can be used instead of number\n\tInternally 56 digits, 19th decimal is used for rounding\n\tHighest number: 922,337,203,685,477,580 or 0xCCCCCCCCCCCCCCC\nExample CALCD.G4B 10 INV\nExample CALCD.G4B 0.2555 INV\nExample CALCD.G4B -2050.456 INV\nExample CALCD.G4B -2,050.456 INV\nExample CALCD.G4B 0.000000000123456789 INV\nExample CALCD.G4B 0.000000000123456789 INV THSEP\nExample CALCD.G4B 256 INV\nExample CALCD.G4B 256 inv SQRT ^ 2 INV\nExample CALCD.G4B 3! INV\nExample CALCD.G4B 20! INV\nExample CALCD.G4B 1 M 1! INV M+ 2! INV M+ 3! INV M+ 4! INV M+\n\t5! INV M+ 6! INV M+ 7! INV M+ 8! INV M+ 9! INV M+ 10! INV M+ 11! INV M+\n\t12! INV M+ 13! INV M+ 14! INV M+ 15! INV M+ 16! INV M+ 17! INV M+\n\t18! INV M+ 19! INV M+ MR ROUND 16
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~2"=="" && set "message=Abort: number is missing in INV" && goto :endlocal
shift
set N=%~1
call :/ / 1 %N% &; if exist result && shift ! set rounded= && goto :endlocal
goto :endlocal

:sq
#-#+ SQ \tFunction SQ - number before is raised to power of two
#-# Use\tCALCD.G4B number SQ\nRemarks\tPostfix function, existing result can be used instead of number\n\tInternally 73 digits, 19th decimal is used for rounding\nExample CALCD.G4B 10 SQ\nExample CALCD.G4B 0.2555 SQ\nExample CALCD.G4B -2050.456 SQ\nExample CALCD.G4B -2,050.456 SQ THSEP\nExample CALCD.G4B 256 SQ\nExample set * ;; CALCD.G4B /echoR 256 INV SQRT INV SQ
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~2"=="" && set "message=Abort: number is missing in %0" && goto :endlocal
shift
set N=%~1
call :^ ^ %N% 2 &; if exist result && shift ! goto :endlocal
goto :endlocal

:cb
#-#+ CB \tFunction CB - number before is raised to power of three
#-# Use\tCALCD.G4B number CB\nRemarks\tPostfix function, existing result can be used instead of number\n\tInternally 73 digits, 19th decimal is used for rounding\nExample CALCD.G4B 10 CB\nExample CALCD.G4B 0.2555 CB\nExample CALCD.G4B -2050.456 CB\nExample CALCD.G4B -2,050.456 CB THSEP\nExample CALCD.G4B 256 CB\nExample CALCD.G4B /echoR 256 INV CBRT INV CB DIGI -4
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~2"=="" && set "message=Abort: number is missing in %0" && goto :endlocal
shift
set N=%~1
call :^ ^ %N% 3 &; if exist result && shift ! goto :endlocal
goto :endlocal

:varp
#-#+ VARP \tFunction VARP - Population Variance of numbers behind
#-#  Use 1\tCALCD.G4B VARP number1 number2 [number3 ...]\nUse 2\tCALCD.G4B VARP MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B VARP 1 2 3\nExample CALCD.G4B 1 - 2 SQ M 2 - 2 SQ M+ 3 - 2 SQ M+ COUNT 1 2 3 \\\\ INV * MR\nExample CALCD.G4B VARP 1 2 3 4 5 6 7\nExample CALCD.G4B VARP 1 2 3 4 5 6 7 * 7 DIGI -1\nExample CALCD.G4B VARP MD (md)0x3000+255\nExample CALCD.G4B VARP MD (md)0x3000+255 * 3
if "%~3"=="" && set "message=Abort: argument(s) missing in VARP" && goto :calcfpend
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
set /u function=%~1
shift
goto :variation

:vars
#-#+ VARS \tFunction VARS - Sample Variance of numbers behind
#-#  Use 1\tCALCD.G4B VARS number1 number2 [number3 ...]\nUse 2\tCALCD.G4B VARS MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B VARS 1 2 3\nExample CALCD.G4B VARS 1 2 3 * 2\nExample CALCD.G4B VARS MD (md)0x3000+255\nExample CALCD.G4B VARS MD (md)0x3000+255 SQRT
if "%~3"=="" && set "message=Abort: argument(s) missing in VARS" && goto :calcfpend
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
set /u function=%~1
shift
goto :variation

:stdevp
#-#+ STDEVP \tFunction STDEVP - Population Standard Deviation of numbers behind
#-#  Use 1\tCALCD.G4B STDEVP number1 number2 [number3 ...]\nUse 2\tCALCD.G4B STDEVP MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B STDEVP 1 3 6 10\nExample CALCD.G4B STDEVP 1 3 6 10 SQ DIGI -1\nExample CALCD.G4B STDEVP MD (md)0x3000+255\nExample CALCD.G4B STDEVP MD (md)0x3000+255 / 100
if "%~3"=="" && set "message=Abort: argument(s) missing in STDEVP" && goto :calcfpend
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
set /u function=%~1
shift
goto :variation

:stdevs
#-#+ STDEVS \tFunction STDEVS - Sample Standard Deviation of numbers behind
#-#  Use 1\tCALCD.G4B STDEVS number1 number2 [number3 ...]\nUse 2\tCALCD.G4B STDEVS MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B STDEVS 1 2 3\nExample CALCD.G4B STDEVS 1 2 3 ^ 2\nExample CALCD.G4B STDEVS MD (md)0x3000+255\nExample CALCD.G4B STDEVS MD (md)0x3000+255 INV
if "%~3"=="" && set "message=Abort: argument(s) missing in STDEVS" && goto :calcfpend
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
set /u function=%~1
shift
goto :variation

:variation
if /i %~1==md &; if %~d2==(md) && set md=%~2 && shift && shift ! endlocal && set "message=Abort '%function%': (md)-device in '%~2' not found" && set result= && goto :calcfpend
if exist md && call Fn.11 "%md%" "+" || endlocal && set "message=Abort '%function%': (md)-device in '%md%' not valid" && set result= && goto :calcfpend
if exist md && if %md:~-3,3%>=256 &; endlocal && set "message=Abort '%function%': sectors of (md)-device in '%md%' above 255" && set result= && goto :calcfpend
set sum=0 && set count=0
if exist md && call :mean goback md %md% &; set mean=%result% && set result= && cat %md% | call :variationloop  &; if exist sum && if %count%>=2 && goto :variationcalculation ! endlocal && set "message=%message%" && set result= && goto :calcfpend
#ORG#if exist md && call :mean goback md %md% &; set mean=%result% && set result= && cat %md% | call :variationloop &; if exist sum && if %count%>=2 && goto :variationcalculation ! endlocal && set "message=%message%" && set result= && goto :calcfpend
if not exist md && call :mean goback %* &; if exist result && set mean=%result% && set result= && set goback= ! endlocal && set "message=%message%" && set result= && goto :calcfpend
:variationloop
if "%~1"=="" &; if not exist md && goto :variationcalculation ! goto :eof
if not exist md &; if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; goto :variationcalculation
if not exist md &; if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; goto :variationcalculation
if not exist md &; if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; goto :variationcalculation
if not exist md &; if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; goto :variationcalculation
###if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; goto :variationcalculation
if not "%~1"=="" && set N=%~1 &; if %N:~-2,2%==mr && set N=%N:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N%==r && set N=%R% ! if /i %N%==-r && set N=-%R%
set difrence= && call :- - %N% %mean% &; if exist result && set difrence=%result% && set result= ! if exist md && goto :eof ! endlocal && set "message=%message%" && set result= && goto :calcfpend
set square= && if exist difrence && call :^ ^ %difrence% 2 &; if exist result && set square=%result% && set result= ! if exist md && goto :calcfpend ! endlocal && set "message=%message%" && set result= && goto :calcfpend
if exist square && call :+ + %sum% %square% &; if exist result && set sum=%result% && set result= ! if exist md && goto :calcfpend ! endlocal && set "message=%message%" && set result= && goto :calcfpend
set /a count=%count%+1 && shift
set N=
goto :variationloop
:variationcalculation
debug msg=0
if %function%==VARP && if %count%>=2 && call :/ / %sum% %count% &; if not exist result && endlocal && set result= && goto :calcfpend
if %function%==VARS && set /a count=%count%-1 &; if %count%>=1 && call :/ / %sum% %count% &; if not exist result && endlocal && set "message=%message%" && set result= && goto :calcfpend
if %function%==STDEVP && if %count%>=2 && call :/ / %sum% %count% &; if not exist result && endlocal && set "message=%message%" && set result= && goto :calcfpend
if %function%==STDEVP && if %count%>=2 && call :sqrt sqrt %result% &; if not exist result && endlocal && set "message=%message%" && set result= && goto :calcfpend
if %function%==STDEVS && set /a count=%count%-1 &; if %count%>=1 && call :/ / %sum% %count% &; if not exist result && endlocal && set "message=%message%" &&  set result= && goto :calcfpend
if %function%==STDEVS && if %count%>=1 && call :sqrt sqrt %result% &; if not exist result && endlocal && set "message=%message%" && set result= && goto :calcfpend
if %function:~-1,1%==P && if not exist result && endlocal && set result= && goto :calcfpend
if %function:~-1,1%==S && if not exist result && endlocal && set result= && goto :calcfpend
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && set "message=%message%"
goto :calcfpend

:"=="
#-#+ == \tFunction "==" - Compare if number1 and number2 are equal
#-# Use \tCALCD.G4B "==" number1 number2\nRemarks If number1==number2 - result=1, if not result=0\n\tDouble qoutes mandatory in "=="\nExample CALCD.G4B "==" 1 1\nExample CALCD.G4B "==" 1 0\nExample CALCD.G4B "==" 1.1 1.20000000\nExample CALCD.G4B "==" -1 -1\nExample CALCD.G4B "==" -.2 -.20000000\nExample CALCD.G4B 8! M "==" MR 7!\nExample CALCD.G4B "==" 0x1000 0x1000.0001\nExample CALCD.G4B "==" 1,000 1000\nExample CALCD.G4B "==" 2.11 1.11\x20;;\x20if %result%==1\x20&&\x20CALCD.G4B 2.11 + 1.11\n\t\t  \x20!\x20CALCD.G4B 2.11 - 1.11
#echo %*
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
#echo n1=%n1% n2=%n2%
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if not exist N1 && set N1=0 ;; if not exist N2 && set N2=0
if %N1%==%N2% && set result=1 ! set result=0
if not %result%==0 &; if not exist decimal1 if not exist decimal2 |; if %decimal1%==%decimal2% && set result=1 ! set result=0
if not %result%==0 && if not exist decimal1 && if not exist decimal2 && set result=1
if not %sign1%==%sign2% && set result=0
endlocal && set result=%result%
goto :eof

:">="
#-#+ >= \tFunction ">=" - Compare if number1 is greater equal than number2
#-# Use \tCALCD.G4B ">=" number1 number2\nRemarks If number1>=number2 - result=1, if not result=0\n\tDouble qoutes mandatory in ">="\nExample CALCD.G4B ">=" 1 1\nExample CALCD.G4B ">=" 1 0\nExample CALCD.G4B ">=" 1.2 1.10000000\nExample CALCD.G4B ">=" -1 -1\nExample CALCD.G4B ">=" -.1 -.20000000\nExample CALCD.G4B 8! M ">=" MR 7!\nExample CALCD.G4B ">=" 0x1000 0x1000.0001\nExample CALCD.G4B ">=" 1,001 1000\nExample CALCD.G4B ">=" 2.11 1.11\x20;;\x20if %result%==1\x20&&\x20CALCD.G4B 2.11 + 1.11\n\t\t  \x20!\x20CALCD.G4B 2.11 - 1.11
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if not exist N1 && set N1=0 ;; if not exist N2 && set N2=0
set /a N1=%sign1% * %N1% && set /a N2=%sign2% * %N2%
if not %N1%<=%N2% && set greater=1 ! set greater=0
if %greater%==0 && if %N1%==%N2% &; if not %numdeci1%>=%numdeci2% && call :addzerosafter "%numdeci1%" "%numdeci2%" "%decimal1%" &; set decimal1=%result% && set result=
if %greater%==0 && if %N1%==%N2% &; if not %numdeci2%>=%numdeci1% && call :addzerosafter "%numdeci2%" "%numdeci1%" "%decimal2%" &; set decimal2=%result% && set result=
if %greater%==0 && if %N1%==%N2% &; if not exist decimal1 if not exist decimal2 |; set /a decimal1=%sign1% * %decimal1% && set /a decimal2=%sign2% * %decimal2% &; if %decimal1%>=%decimal2% && set greater=1 ! set greater=0
if %greater%==0 && if %N1%==%N2% && if not exist decimal1 && if not exist decimal2 && set greater=1
if %greater%==1 && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof

:"<="
#-#+ <= \tFunction "<=" - Compare if number1 is smaller or equal than number2
#-#  Use \tCALCD.G4B "<=" number1 number2\nRemarks If number1<=number2 - result=1, if not result=0\n\tDouble qoutes mandatory in "<="\nExample CALCD.G4B "<=" 1 1\nExample CALCD.G4B "<=" 1 0\nExample CALCD.G4B "<=" 1.1 1.20000000\nExample CALCD.G4B "<=" -1 -1\nExample CALCD.G4B "<=" -.1 -.20000000\nExample CALCD.G4B 8! M "<=" MR 7!\nExample CALCD.G4B "<=" 0x1000 0x1000.0001\nExample CALCD.G4B "<=" 1,001 1000\nExample CALCD.G4B "<=" 2.11 1.11\x20;;\x20if %result%==1\x20&&\x20CALCD.G4B 2.11 + 1.11\n\t\t  \x20!\x20CALCD.G4B 2.11 - 1.11
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n2=%~2 &; if /i %n2:~-2,2%==mr && set n2=%n2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n2%==r && set n2=%R% ! if /i %n2%==-r && set n2=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
if /i "%n2:~-1,1%"=="!" && set n2=%n2:~0,-1% &; if %n2:~0,1%==- && set n2=%n2:~1% && set sign=- ! set sign= &; call :fact goback %n2% &; if exist result && set n2=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if not exist N1 && set N1=0 ;; if not exist N2 && set N2=0
set /a N1=%sign1% * %N1% && set /a N2=%sign2% * %N2%
if not %N1%>=%N2% && set smaller=1 ! set smaller=0
if %smaller%==0 && if %N1%==%N2% &; if not %numdeci1%>=%numdeci2% && call :addzerosafter "%numdeci1%" "%numdeci2%" "%decimal1%" &; set decimal1=%result% && set result=
if %smaller%==0 && if %N1%==%N2% &; if not %numdeci2%>=%numdeci1% && call :addzerosafter "%numdeci2%" "%numdeci1%" "%decimal2%" &; set decimal2=%result% && set result=
if %smaller%==0 && if %N1%==%N2% &; if not exist decimal1 if not exist decimal2 |; set /a decimal1=%sign1% * %decimal1% && set /a decimal2=%sign2% * %decimal2% &; if %decimal1%<=%decimal2% && set smaller=1 ! set smaller=0
if %smaller%==0 && if %N1%==%N2% && if not exist decimal1 && if not exist decimal2 && set smaller=1
if %smaller%==1 && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof

:Pnr
#-#+ Pnr \tFunction Pnr - Permutations of n objects taken r at a time
#-# Use \tCALCD.G4B Pnr n r\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tRange of integers: n, r from 1 up to 20 and r <= n\nExample CALCD.G4B Pnr 7 3\nExample CALCD.G4B 7 - 3 M 7! / MR!\nExample CALCD.G4B 7! M 7 - 3 RM / MR!\nExample CALCD.G4B Pnr 5 5 M Pnr 4 4 M+ MR\nExample CALCD.G4B Pnr 5 5\nExample CALCD.G4B 5! M MR\nExample CALCD.G4B 5! M MR * 1\nExample CALCD.G4B 5! * 1
if not "%~2"=="" if not "%~3"=="" || set "message=Abort: argument(s) number missing in Pnr, check '%~1' or '%~2'" && goto :calcfpend
shift
setlocal && set * && set MR=%MR% && set R=%R%
set n=%~n1 && shift
if /i %n:~-2,2%==mr && set n=%n:~0,-2%%%MR% ! if /i %n%==r && set n=%R% ! if /i %n%==-r && set n=-%R%
if "%n:~0,1%"=="-" && set n=%n:~1%
if "%n:~0,1%"=="+" && set n=%n:~1%
if "%n:~-1,1%"=="!" && set n=%n:~0,-1%
if not exist n && endlocal && set "message=Abort Pnr: number '%~1' is not valid" && set result= && goto :calcfpend
if %n%==0 && endlocal && set "message=Abort Pnr: n=0 is not possible" && set result= && goto :calcfpend
if %n%>=21 && endlocal && set "message=Abort Pnr: factorial of '%n%!' is too high" && set result= && goto :calcfpend
set r=%~n1 && shift
if /i %r:~-2,2%==mr && set r=%r:~0,-2%%%MR% ! if /i %r%==r && set r=%R% ! if /i %r%==-r && set r=-%R%
if "%r:~0,1%"=="-" && set r=%r:~1%
if "%r:~0,1%"=="+" && set r=%r:~1%
if "%r:~-1,1%"=="!" && set r=%r:~0,-1%
if not exist r && endlocal && set "message=Abort Pnr: number '%~2' is not valid" && set result= && goto :calcfpend
if %r%==0 && endlocal && set "message=Abort Pnr: r=0 is not possible" && set result= && goto :calcfpend
if %r%>=21 && endlocal && set "message=Abort Pnr: factorial of '%r%!' is too high" && set result= && goto :calcfpend
if not %r%<=%n% && endlocal && set "message=Abort Pnr: '%r%' > '%n%'" && set result= && goto :calcfpend
calc %n% - %r% ;; set /a P=%@retval%
call :fact goback %n% &; if not exist message && set n=%result% && set result= ! endlocal && set "message=%message%" && set result= && goto :calcfpend
call :fact goback %P% &; if not exist message && set P=%result% && set result= ! endlocal && set "message=%message%" && set result= && goto :calcfpend
set /a result=%n% / %P%
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; endlocal && set result=%result% && goto :calcfploop
if not "%~2"=="" &; if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; endlocal && set result=%result% && goto :calcfploop
if not "%~2"=="" && if not "%~3"=="" &; if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" |; endlocal && set result=%result% && goto :calcfprestart
endlocal && set result=%result%
goto :calcfpend

:Cnr
#-#+ Cnr \tFunction Cnr - Combinations of n objects taken r at a time
#-# Use \tCALCD.G4B Cnr n r\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tRange of integers: n, r from 1 up to 20 and r <= n\nExample CALCD.G4B Cnr 7 3\nExample CALCD.G4B 7 - 3 M 7! / MR! / 3!\nExample CALCD.G4B 7! M 7 - 3 RM / MR! / 3!\nExample CALCD.G4B Cnr 7 3 / 2.5 M Cnr 7 3 M+ MR\nExample CALCD.G4B MC Cnr 5 1 M+ Cnr 5 2 M+ Cnr 5 3 M+ Cnr 5 4 M+ Cnr 5 5 M+ MR
if not "%~2"=="" if not "%~3"=="" || set "message=Abort: argument(s) number missing in Cnr, check '%~1' or '%~2'" && goto :calcfpend
shift
setlocal && set * && set MR=%MR% && set R=%R%
set n=%~n1 && shift
if /i %n:~-2,2%==mr && set n=%n:~0,-2%%%MR% ! if /i %n%==r && set n=%R% ! if /i %n%==-r && set n=-%R%
if "%n:~0,1%"=="-" && set n=%n:~1%
if "%n:~0,1%"=="+" && set n=%n:~1%
if "%n:~-1,1%"=="!" && set n=%n:~0,-1%
if not exist n && endlocal && set "message=Abort Cnr: number '%~1' is not valid" && set result= && goto :calcfpend
if %n%==0 && endlocal && set "message=Abort Cnr: n=0 is not possible" && set result= && goto :calcfpend
if %n%>=21 && endlocal && set "message=Abort Cnr: factorial of '%n%!' is too high" && set result= && goto :calcfpend
set r=%~n1 && shift
if /i %r:~-2,2%==mr && set r=%r:~0,-2%%%MR% ! if /i %r%==r && set r=%R% ! if /i %r%==-r && set r=-%R%
if "%r:~0,1%"=="-" && set r=%r:~1%
if "%r:~0,1%"=="+" && set r=%r:~1%
if "%r:~-1,1%"=="!" && set r=%r:~0,-1%
if not exist r && endlocal && set "message=Abort Cnr: number '%~2' is not valid" && set result= && goto :calcfpend
if %r%==0 && endlocal && set "message=Abort Cnr: r=0 is not possible" && set result= && goto :calcfpend
if %r%>=21 && endlocal && set "message=Abort Cnr: factorial of '%r%!' is too high" && set result= && goto :calcfpend
if not %r%<=%n% && endlocal && set "message=Abort Cnr: '%r%' > '%n%'" && set result= && goto :calcfpend
calc %n% - %r% ;; set /a P=%@retval%
call :fact goback %n% &; if not exist message && set n=%result% && set result= ! endlocal && set "message=%message%" && set result= && goto :calcfpend
call :fact goback %P% &; if not exist message && set P=%result% && set result= ! endlocal && set "message=%message%" && set result= && goto :calcfpend
call :fact goback %r% &; if not exist message && set r=%result% && set result= ! endlocal && set "message=%message%" && set result= && goto :calcfpend
set /a result=%n% / %P% / %r%
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; endlocal && set result=%result% && goto :calcfploop
if not "%~2"=="" &; if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; endlocal && set result=%result% && goto :calcfploop
if not "%~2"=="" && if not "%~3"=="" &; if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" |; endlocal && set result=%result% && goto :calcfprestart
endlocal && set result=%result%
goto :calcfpend

:round
#-#+ ROUND \tFunction ROUND - Number before is rounded to given number of\n\tdecimals or integers
#-# Use\tCALCD2.G4B [switch] number1 ROUND NUMBER\nRemarks Infix function, existing result can be used instead of number1\n\tRounding up in earlier result is undone first: no double rounding\n\tIf highest lost digit >=5 rounding up, if <=4 rounding down\n\tIf NUMBER >=0 rounding of decimals, if NUMBER <=-1 rounding of integers\n\tIf variable 'round' is set before use of CALCD.G4B, result is rounded\n\tUsing ROUND last on command-line overides set-variable 'round'\n\tIf variable 'deci' exists too, 'deci' is first, 'fix' overides 'round'\n\tIf 'digi' exists too and if 'rounded=Y', 'round' will be ignored\n\tSet-variable 'round' is case-sensitive!\nExample CALCD.G4B 0.12345 ROUND 4\nExample CALCD.G4B 10 / 7 ROUND 4 * 7\nExample CALCD.G4B STDEVP 1 2 3 4 5 6 7 ROUND 8\nExample CALCD.G4B 12345 ROUND -4\nExample CALCD.G4B 12345678912345678 SQRT ROUND 0\nExample$[0x00]"$[0x07]set round=0 ;; CALCD.G4B 12345678912345678 SQRT\nExample$[0x00]"$[0x07]set round=0 ;; CALCD.G4B 12345678912345678 SQRT ROUND 2
if "%~4"=="" && set round=
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set echor=%echor% && set echoMR=%echoMR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1
if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
set n2=%~2
#TOOMUCH#call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
set fix=Y && call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if %sign1%==-1 && set sign=-
if %lastrnd%==1 && if %numdeci1%>=1 && set /a decidiff=%numdeci1% - %N2% &; if %decidiff%>=1 &; set /a decimal1=%decimal1% - 1 &; set decimal1=000000000000000000%decimal1% &; call set decimal1=%^decimal1:~-%numdeci1%,%numdeci1%%%
if %sign2%==1 && if not exist decimal1 && set result=%n1% && goto :endlocal
if %sign2%==1 && if %N2%>=%numdeci1% && set result=%sign%%%N1%.%decimal1:~0,18% && goto :endlocal
if %sign2%==1 &; call if %^decimal1:~%N2%,1%>=5 && set round=1 && set lastrnd=1 ! set round=0 && set lastrnd=0
if %sign2%==1 && call set decimal1=%^decimal1:~0,%N2%%% && set rounded=Y
if %sign2%==1 && if %N2%>=1 && set round=000000000000000000%round% &; call set round=%^round:~-%N2%,%N2%%%
if %sign2%==1 && if %N2%>=1 &; if not %round%==0 && call :+ + %sign1:~0,-1%%%N1%.%decimal1% %sign1:~0,-1%%0.%round% ! set result=%sign1:~0,-1%%%N1%.%decimal1%
if %sign2%==1 && if %N2%==0 && set /a result=%sign1% * %N1% + %sign1:~0,-1%%%round%
#CENTRAL#if %sign2%==1 && if not exist fix && call :splitnumber "%result%" &; if exist decimals && call :stripzerosafter "%decimals%" &; if exist decimals && set result=%N%.%result% ! set result=%N%
if %sign2%==1 && goto :endlocal
if %N1%>=1 && set N1=%N1% &; set /a N1len=%@retval% &; if %N2%>=%N1len% && set result=%n1% && goto :endlocal
if %N1%==0 && set result=%n1% && goto :endlocal
call if %^N1:~-%N2%,1%>=5 && set round=1 ! set round=0
call set N1=%^N1:~0,-%N2%%% && set rounded=Y
set N=000000000000000000 &; call set N=%^N:~0,%N2%%% && set rounded=Y
set /a result=%sign1% * %N1% + %sign1:~0,-1%%%round% &; set /a result=%result%%%N%
goto :endlocal

:deci
#-#+ DECI \tFunction DECI - Number before is rounded down to given number of\n\tdecimals or integers
#-# Use\tCALCD2.G4B [switch] number1 DECI NUMBER\nRemarks Infix function, existing result can be used instead of number1\n\tRounding up in earlier result is undone first (remains with DECI 18)\n\tIf NUMBER >=0 rounddown decimals, ignored if not enough decimals\n\tif NUMBER <=-1 rounddown integers, ignored if not enough integers\n\tIf variable 'deci' is set before CALCD.G4B, result is rounded down\n\tUsing DECI last on command-line overides set-variable 'deci'\n\tIf 'round' exists too, 'deci' is first\n\tIf 'digi' exists too and if 'rounded=Y', 'deci' will be ignored\n\tIf 'fix' exists too, 'deci' will be ignored\n\tSet-variable 'deci' is case-sensitive!\nExample CALCD.G4B 0.12345 DECI 4\nExample CALCD.G4B 10 / 7 DECI 4\nExample CALCD.G4B 10 / 7 DECI 4 * 7\nExample CALCD.G4B STDEVP 1 2 3 4 5 6 7 DECI 8\nExample CALCD.G4B 12345678912345678 SQRT DECI 0\nExample$[0x00]"$[0x07]set deci=0 ;; CALCD.G4B 12345678912345678 SQRT\nExample$[0x00]"$[0x07]set deci=0 ;; CALCD.G4B 12345678912345678 SQRT DECI -2
if "%~4"=="" && set deci=
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set echor=%echor% && set echoMR=%echoMR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1
if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
set n2=%~2
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if %sign1%==-1 && set sign=-
if %sign2%==1 && if not exist decimal1 && set result=%n1% && goto :endlocal
if not %N2%<=18 && set result=%n1% && goto :endlocal
if %sign2%==1 && if %lastrnd%==1 && set /a decimal1=%decimal1% - 1 &; set decimal1=000000000000000000%decimal1% &; call set decimal1=%^decimal1:~-%numdeci1%,%numdeci1%%% && set lastrnd=0
if %sign2%==1 && if %N2%>=%numdeci1% && set result=%sign%%%N1%.%decimal1% && goto :endlocal
if %sign2%==1 && call set decimal1=%^decimal1:~0,%N2%%% && set rounded=Y && set lastrnd=0
if %sign2%==1 && set /a integer=%sign1% * %N1%
#CENTRAL#if exist decimal1 && if not exist fix && call :stripzerosafter "%decimal1%" &; set decimal1=%result% && set result=
if %sign2%==1 &; if exist decimal1 && set result=%integer%.%decimal1% && goto :endlocal ! set result=%integer% && goto :endlocal
if %N2%>=%N1len% && set result=%n1% && goto :endlocal
#NOT#call if %^N1:~-%N2%,1%>=5 && set round=1 ! set round=0
if %numdeci1%==0 && if %lastrnd%==1 && set /a N1=%N1% - 1
call set N1=%^N1:~0,-%N2%%% && set rounded=Y && set lastrnd=0
set N=000000000000000000 &; call set N=%^N:~0,%N2%%%
set /a result=%sign1% * %N1% &; set /a result=%result%%%N%
goto :endlocal

:digi
#-#+ DIGI \tFunction DIGI - Digits in number before rounded to given number
#-# Use\tCALCD2.G4B [switch] number1 DIGI NUMBER\nRemarks Infix function, existing result can be used instead of number1\n\tRounding up in earlier result is undone first: no double rounding\n\tIf highest lost digit >=5 rounding up, if <=4 rounding down\n\tIf NUMBER >= 1 rounding to given number of digits\n\tIf NUMBER <=-1 rounding with less digits (NUMBER = 0 is ignored)\n\tDIGI with NUMBER <=-1 can only be used if 'rounded=Y', check: /echoR\n\tIf variable 'digi' is set before use of CALCD.G4B, digits in result\n\tare limited to value of 'digi'. Use of DIGI on command-line overides\n\tIf 'deci' and / or 'round' exists too, they will be ignored\n\tIf 'fix' exists too, 'fix' overrides 'digi'\n\tSet-variable 'digi' is case-sensitive!\n\tSet-variable 'digi' will only be used if 'rounded=Y', check: /echoR\nExample CALCD.G4B 10.12345 DIGI 4\nExample CALCD.G4B 10 / 7 DIGI 4\nExample CALCD.G4B 10 / 7 DIGI 4 * 7\nExample CALCD.G4B STDEVP 1 2 3 4 5 6 7 DIGI 4\nExample CALCD.G4B 12345678912345678 SQRT DIGI 8\nExample$[0x00]"$[0x07]set digi=9 ;; CALCD.G4B 123456789.123456789 SQRT\nExample set digi=9 ;; CALCD.G4B 123456789.123456789 SQRT DIGI -9\nExample$[0x00]"$[0x07]set digi=-9 ;; CALCD.G4B /echoR 1.23 ^ 9 ;; CALCD.G4B /echoR 1.23 ^ 10
#??#\n\tSet-variable 'digi' will only be used if 'rounded=Y'
if "%~4"=="" && set digi=
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set echor=%echor% && set echoMR=%echoMR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1
if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
set n2=%~2 &; if %n2%==0 && set result=%n1% && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if %N1%==0 && set N1len=0
if %sign2%==-1 && set sign2=- && goto :lessdigits
if %N2%==0 && set result=%n1% && goto :endlocal
if not %N2%<=37 && set result=%n1% && goto :endlocal
set /a digits=%N1len% + %numdeci1%
set zeros=0000000000000000000000000000000000000
if %sign2%==1 && if not %N2%<=%digits% && set result=%n1% && goto :endlocal
if not %N2%>=%N1len% && set /a digileft=%N2% + 1 && set decimal1= && set numdeci1=0 && set /a numzeros=%N1len% - %N2% &; call set /a N1=%^N1:~0,%digileft%%% &; call if %^N1:~%N2%,1%>=5 && call set /a N1=%^N1:~0,%N2%%% + 1 && set lastrnd=1 ! call set N1=%^N1:~0,%N2%%% && set lastrnd=0
if %N2%>=%N1len% && if %numdeci1%>=1 && set /a N2=%N2% - %N1len% &; if %N2%>=1 && set /a digileft=%N2% + 1 &; call set decimal1=%^decimal1:~0,%digileft%%% &; call if %^decimal1:~%N2%,1%>=5 && set round=1 && set lastrnd=1 && call set decimal1=%^decimal1:~0,%N2%%% ! set round=0 && set lastrnd=0 && call set decimal1=%^decimal1:~0,%N2%%%
if %round%==1 && if %N2%>=1 && set /a decimal1=%decimal1% + 1 &; set decimal1=000000000000000000%decimal1% &; call set /a N1=%N1% + %^decimal1:~0,-%N2%%% && call set decimal1=%^decimal1:~-%N2%,%N2%%%
if exist decimal1 && if %N2%==0 &; if %decimal1:~0,1%>=5 && set /a N1=%N1% + 1 && set lastrnd=1 && set decimal1= ! set decimal1= && set lastrnd=0
if not exist decimal1 && call set zeros=%^zeros:~0,%numzeros%%%
#BadResultIfAllZeros!#if exist decimal1 && call :stripzerosafter "%decimal1%" &; set decimal1=%result% && set result=
if exist decimal1 && set result=%N1%.%decimal1% ! set result=%N1%%%zeros%
#CENTRAL#if exist decimal1 && if not exist fix && call :stripzerosafter "%result%" &; if %result:~-1,1%==. && set result=%result:~0,-1%
if %sign1%==-1 && set result=-%result%
goto :endlocal

:lessdigits
if not %rounded%==Y && set result=%~1 && goto :endlocal
set /a numdigi=%N1len% + %numdeci1% &; if %N2%>=%numdigi% && set result=%~1 && goto :endlocal
set digiless=%N2%
if %numdeci1%>=%digiless% && set /a digileft=%numdeci1% - %digiless% &; call :round round %~1 %digileft% &; goto :endlocal
set decimal1= && set /a digileft=%numdeci1% - %digiless%
:lessintegers
call if %^N1:~%digileft%,1%==0 && set /a digileft=%digileft% - 1 && goto :lessintegers
call :round round %sign2%%%N1% %digileft%
goto :endlocal

:fix
#-#+ FIX \tFunction FIX - Decimals in number before fixed to given number
#-# Use\tCALCD2.G4B [switch] number1 FIX NUMBER\nRemarks Infix function, existing result can be used instead of number1\n\tRounding up in earlier result is undone first: no double rounding\n\tIf highest lost digit >=5 rounding up, if <=4 rounding down\n\tIf NUMBER >= 0 rounding to given number of decimals\n\tIf NUMBER <=-1 FIX is ignored\n\tIf variable 'fix' is set before, also decimals in last results\n\tare limited to value of 'fix'. Use of FIX on command-line overides\n\tIf 'deci' and/ or 'round' and/ or 'digi' exists, 'fix' overrides\n\tSet-variable 'fix' is case-sensitive!\nExample CALCD.G4B 10.12345 FIX 4\nExample CALCD.G4B 10 / 7 FIX 4\nExample CALCD.G4B 10 / 7 FIX 4 * 7\nExample CALCD.G4B STDEVP 1 2 3 4 5 6 7 FIX 4\nExample CALCD.G4B 12345678912345678 SQRT FIX 8\nExample$[0x00]"$[0x07]set fix=3 ;; CALCD.G4B 123456789.123456789 SQRT\nExample$[0x00]"$[0x07]set fix=2 ;; CALCD.G4B 123456789.123456789 SQRT FIX 5\nExample$[0x00]"$[0x07]set fix=4 ;; CALCD.G4B 123456789.123456789 SQRT / 7 ;; echo && set
if "%~4"=="" && set fix= && set round= && set deci= && set digi=
#NOT!# && set digi=
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set echor=%echor% && set echoMR=%echoMR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R%
if "%~3"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1
if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
set n2=%~n2 &; if %n2:~0,1%==- && set sign=- && set n2=%fix:~1% &; if not exist n2 && set result=%n1% && set fixed= && goto :endlocal ! if %sign%==- && set result=%n1% && set fixed= && goto :endlocal
call :operatorsinput %0 %n1% %n2% &; if exist message && goto :endlocal
if %sign1%==-1 && set sign=-
#org#if %numdeci1%==0 && set result=%n1% && set fixed= && goto :endlocal
if %N2%>=18 && set result=%sign%%%N1%.%decimal1:~0,18% && goto :endlocal
call :round round "%N1%.%decimal1%" "%N2%" && if exist result && set fixed=Y ! set rounded= && set lastrnd= && goto :endlocal
call :splitnumber "%result%" &; if %N2%>=1 && set decimals=%decimals%%000000000000000000 &; call set decimals=%^decimals:~0,%N2%%%
#org#call :splitnumber "%result%" &; if not %numdecis%>=%N2% && set decimals=%decimals%%000000000000000000 &; call set decimals=%^decimals:~0,%N2%%%
if exist decimals && set result=%sign%%%N%.%decimals% ! set result=%sign%%%N%
goto :endlocal

:cbrt
#-#+ CBRT \tFunction CBRT - cubic root of number before
#-# Use\tCALCD.G4B number CBRT\nRemarks\tPostfix function, existing result can be used instead of number\n\tInternally 37 digits, NO rounding\nExample CALCD.G4B 729 CBRT\nExample CALCD.G4B 2.985984 CBRT\nExample CALCD.G4B 1881365963625 CBRT\nExample CALCD.G4B 160288833718161 CBRT\nExample CALCD.G4B -2050.456 CBRT\nExample CALCD.G4B 0.000000019184 CBRT\nExample CALCD.G4B 0x7FFFFFFFFFFFFFFF CBRT HEX\nExample CALCD.G4B /echoR 0x7FFFFFFFFFFFFFFF CBRT ROUND 0 HEX\nExample CALCD.G4B 5,390,793,501,178,682,241.662464 CBRT THSEP\nExample CALCD.G4B /echo 19.184 CBRT M MR ^ 3 M DIGI -2 ;; echo && set
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if "%~2"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% &; if exist message && goto :endlocal ! set n1=
if not exist decimal1 && set numdeci1=0
if exist decimal1 && set decimal1=%decimal1:~0,18% &; set /a numdeci1=%@retval%
if %N1%==0 && if %numdeci1%==0 && set result=0 && goto :endlocal
if "%sign1%"=="-1" && set sign=- ! set sign=
set N=%N1% &; set /a Nlen=%@retval% &; if %N%==0 && set Nlen=0
set decilen=0 && set numdeci=0 && set decimals=%decimal1% && set maxdeci=18
:checkleadzeros
if exist decimals && if %N%==0 && if %decimals:~0,3%==0 && set decimals=%decimals:~3% && set /a numdeci=%numdeci%+1 && set enddeci=Y && goto :checkleadzeros
if exist decimals && set decimals=%decimals% &; set /a decilen1=%@retval%
if exist decimals &; if %decilen1%==1 && set decimals=%decimals%%00 ! if %decilen1%==2 && set decimals=%decimals%%0
if exist decimals && set decimal=%decimals% &; set /a decilen=%@retval% && set decimals= &; calc %decilen% % 3 &; if %@retval%==2 && set decimal=%decimal%%0 && set /a decilen=%decilen% + 1 ! set decimal=%decimal%%00 && set /a decilen=%decilen% + 2
if exist decimal && if %N%==0 && set N=%decimal:~0,3% && set decimal=%decimal:~3% && set /a numdeci=%numdeci%+1 && set enddeci=Y
if exist decimal && set N=%N% &; set /a Nlen=%@retval%
calc %Nlen% % 3 |; if %N:~0,3%>=729 && set /a startcrt=%N:~0,3% && set N=%N:~3% && set proxy=729 && set crt=9 ! if %N:~0,3%>=512 && set startcrt=%N:~0,3% && set N=%N:~3% && set proxy=512 && set crt=8 ! if %N:~0,3%>=343 && set startcrt=%N:~0,3% && set N=%N:~3% && set proxy=343 && set crt=7 ! if %N:~0,3%>=216 && set startcrt=%N:~0,3% && set N=%N:~3% && set proxy=216 && set crt=6 ! if %N:~0,3%>=125 && set startcrt=%N:~0,3% && set N=%N:~3% && set proxy=125 && set crt=5 ! if %N:~0,3%>=100 && set startcrt=%N:~0,3% && set N=%N:~3% && set proxy=64 && set crt=4 ! if %N:~0,3%>=64 && set /a startcrt=%N:~0,3% && set N=%N:~3% && set proxy=64 && set crt=4 ! if %N:~0,3%>=27 && set /a startcrt=%N:~0,3% && set N=%N:~3% && set proxy=27 && set crt=3 ! if %N:~0,3%>=8 && set /a startcrt=%N:~0,3% && set N=%N:~3% && set proxy=8 && set crt=2 ! set /a startcrt=%N:~0,3% && set N=%N:~3% && set proxy=1 && set crt=1
if not exist crt && calc %Nlen% % 3 &; if %@retval%==2 &; if %N:~0,2%>=64 && set startcrt=%N:~0,2% && set N=%N:~2% && set proxy=64 && set crt=4 ! if %N:~0,2%>=27 && set startcrt=%N:~0,2% && set N=%N:~2% && set proxy=27 && set crt=3 ! if %N:~0,2%>=8 && set /a startcrt=%N:~0,2% && set N=%N:~2% && set proxy=8 && set crt=2 ! set /a startcrt=%N:~0,2% && set N=%N:~2% && set proxy=1 && set crt=1
if not exist crt && calc %Nlen% % 3 &; if %@retval%==1 &; if %N:~0,1%>=8 && set startcrt=%N:~0,1% && set N=%N:~1% && set proxy=8 && set crt=2 ! set startcrt=%N:~0,1% && set N=%N:~1% && set proxy=1 && set crt=1
set /a remainer=%startcrt% - %proxy%
if not exist N && if %remainer%==0 &; if %numdeci%==0 && if %decilen%==0 && set /a integer=%crt% && goto :calccrtend ! set integer=0 && set decimals=000000000000000000%crt%
if not exist N && if %remainer%==0 && if not exist decimal &; if %numdeci%>=1 && set crt=000000%crt% &; call set /a integer=%^crt:~0,-%numdeci%%% && call set decimals=%^crt:~-%numdeci%,%numdeci%%% && goto :calccrtend
set proxy=
if not exist N && if not exist decimal && set decimal=0000000000000000000000000000000000000000000000000000000 && set end=Y
if not exist N && if exist decimal && set N=%decimal:~0,3% && set decimal=%decimal:~3% && set /a numdeci=%numdeci%+1 && set enddeci=Y
set remainer=%remainer%%%N:~0,3% && set N=%N:~3%
set D=9
:calccrtloop
set /a proxyA=300 * %crt% * %crt%
set /a proxyB=30 * %crt% * %D%
set /a proxy=%D% * %D% + %proxyA% + %proxyB% * %D%
if not %proxy%<=%remainer% && set /a D=%D% - 1 &; if %D%>=0 && goto :calccrtloop
if not %crt%%%D%>=175341304 && set crt=%crt%%%D% && set /a remainer=%remainer% - %proxy% ! set remainer=%olremain% && set N= && set decimal= && if %end%==Y && if %enddeci%==Y && set /a numdeci=%numdeci% - 1
#bad?#set crt=%crt%%%D% && set /a remainer=%remainer% - %proxy% && set D=9
#not?#if exist N && if %remainer%%%N:~0,3%>=0x7FFFFFFFFFFFFFFF && set N=
## (300crt^2+30crtD+D^2)D=max => 300crt^2+30crtD-((max/D)-D^2)=0 => crt^2+1/10crtD-((max/D)-D^2)/300=0 => (crt+9/10)^-81/100-((max/9-81)/300=0 => crt=-9/10+(C)^(1/2)
##Max crt=175 341 304
#org#if exist N && if %crt%>=175341304 && set N= && set crt=%crt:~0,-1% && if %end%==Y && set /a numdeci=%numdeci% - 1
if not exist N && if %numdeci%==0 && set /a integer=%crt% && goto :calccrtend
if not exist N && if not exist decimal && if %numdeci%>=1 && set crt=000000%crt% &; call set /a integer=%^crt:~0,-%numdeci%%% && call set decimals=%^crt:~-%numdeci%,%numdeci%%% && goto :calccrtend
set olremain=%remainer%
if not exist N && if not exist decimal && if not %end%==Y && if not %remainer%==0 && set N=0000000000000000000000000000000000000000000000000000000 && set end=Y
if not exist N && set N=%decimal:~0,3% && set decimal=%decimal:~3% && set /a numdeci=%numdeci%+1 && set enddeci=Y
set /a remainer=%remainer%%%N:~0,3% && set N=%N:~3% &; set /a Nlen=%@retval%
set D=9
goto :calccrtloop
:calccrtend
if not %remainer%==0 && set D=9 && call :crtstage2
if not %remainer%==0 && set rounded=Y ! set lastrnd=
#v1.20#if exist decimals && if %rounded%==Y &; if %decimals:~-1,1%>=5 && set round=1 && set lastrnd=1 ! set round=0 && set lastrnd=0 &; set decimals=%decimals:~0,-1% && set /a numdeci=%numdeci% - 1 &; set /a decimals=%decimals% + %round% &; set decimals=00000000000000000000000000000000000000%decimals% &; call set /a integer=%integer% + %^decimals:~0,-%numdeci%%% && call set decimals=%^decimals:~-%numdeci%,%numdeci%%%
if exist decimals && if not exist fix && call :stripzerosafter "%decimals%" &; set decimals=%result% && set result=
#CENTRAL#if exist decimals && if not %rounded%==Y && call :stripzerosafter "%decimals%" &; set decimals=%result% && set result=
if exist decimals && set result=%sign%%%integer%.%decimals% ! set result=%sign%%%integer%
goto :endlocal

:crtstage2
call :^ "noround" %integer%.%decimals%%%D% 3 &; set crtexp3=%result% && set result= &; call :"<=" "<=" %crtexp3% %N1%.%decimal1% &; if %result%==0 && set /a D=%D%-1 &; if %D%>=1 && set result= && goto :crtstage2 ! set result=1
if %result%==1 && if not %D%==0 && set result= && call :"==" "==" %crtexp3% %N1%.%decimal1% &; if %result%==1 && if not %lastrnd%==0 && set /a D=%D%-1 && set result= && goto :crtstage2 ! if %result%==1 && set remainer=0 && set decimals=%decimals%%%D% && set /a numdeci=%numdeci%+1 && set result= && goto :eof ! set result=1
if %result%==1 && set decimals=%decimals%%%D% && set /a numdeci=%numdeci%+1 && set result=
if %numdeci%<=6 && call :"==" "==" %crtexp3% %N1%.%decimal1% &; if %result%==1 && set remainer=0 && set result= && goto :eof
if %numdeci%>=%maxdeci% && set lastrnd=0 && goto :eof
set D=9 && set crtexp3= && set result=
goto :crtstage2

:hex
#-#+ HEX \tFunction HEX - number before is converted to hexa-decimal
#-# Use\tCALCD.G4B number HEX\nRemarks\tPostfix function, existing result can be used instead of number\n\tInternally 19 digits, all decimals are cut-off, no rounding\n\tIf variable 'hex' is set before, final result in hex\n\tIf 'deci' and/ or 'round' and/ or 'digi' and/ or 'fix' exists, 'hex'\n\tcomes last, but 'hex' is overruled by set-variable 'thsep'\n\tSet-variable 'hex' is case-sensitive!\n\tAny set-value is allowed, best use: set hex=Y\nExample CALCD.G4B 10.12345 HEX\nExample CALCD.G4B 10 / 6 HEX\nExample CALCD.G4B 10 / 6 ROUND 0 HEX\nExample CALCD.G4B /echo 10m / 7 HEX M 10m / 6 HEX M+ 10m / 5 HEX M+ MR * 7k HEX\nExample CALCD.G4B 10m / 7 M 10m / 6 M+ 10m / 5 M+ MR * 7k HEX\nExample CALCD.G4B STDEVP 500 1000 2000 3000 4000 5000 6000 7000 HEX\nExample CALCD.G4B STDEVP 500 1000 2000 3000 4000 5000 6000 7000 ROUND 0 HEX\nExample CALCD.G4B 12345678912345678 SQRT DECI 0 HEX\nExample$[0x00]"$[]set hex=Y ;; /echoR CALCD.G4B 123456789.123456789 SQRT ^ 4\nExample$[0x00]"$[]set hex=Y ;; /echoR CALCD.G4B 123456789.123456789 SQRT ^ 4 ROUND 0
if "%~3"=="" && set fix= && set fixed=
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R%
if "%~2"=="" && set "message=Abort: argument(s) missing in %0" && goto :endlocal
shift
set n1=%~1 &; if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set n1=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatorsinput %0 %n1% &; if exist message && goto :endlocal
if "%sign1%"=="-1" && set sign=- ! set sign=
set /A result=%sign%%%N1% && if %numdeci1%>=1 && set lastrnd=0
goto :endlocal

:thsep
#FROM_FATLSDIR.G4B:thousandseparator#
#-#+ THSEP \tFunction THSEP - adds comma as thousands-separator to\n\tnumber before
#-# Use\tCALCD.G4B number THSEP\nRemarks\tPostfix function, existing result can be used instead of number\n\tLast argument on command-line, earlier use of THSEP is ignored\n\tOutput: max 19 integers + 18 decimals, no rounding\n\tInputs with comma-thousands-separator allowed, output needs THSEP\n\tIf variable 'thsep' is set before, final result contains thousand\n\tseperator(s) and variable R will contain original number afterwards\n\tIf 'deci' and/ or 'round' and/ or 'digi' and/ or 'fix' and/ or 'hex'\n\texists, 'thsep' comes last and will overrule 'hex'\n\tSet-variable 'thsep' is case-sensitive!\n\tAny set-value is allowed, best use: set thsep=Y\nExample CALCD.G4B 10000000 THSEP\nExample CALCD.G4B 2555555.2555 THSEP\nExample CALCD.G4B -2050.456 / 0.001 THSEP\nExample CALCD.G4B -20,050,123.456 * -3,500 ROUND 4 THSEP\nExample CALCD.G4B -20,050,123.456 * -3,500 ROUND 4\nExample CALCD.G4B 2 ^ 32 THSEP\nExample CALCD.G4B 20! THSEP\nExample CALCD.G4B 2 ^ 62 THSEP\nExample CALCD.G4B 2 ^ 62 M - 1 M+ MR THSEP\nExample set thsep=Y\x20;;\x20CALCD.G4B 2 ^ 62 M - 1 M+ MR ;; set
setlocal && set *
#notneeded# && set MR=%MR% && set memrnd=%memrnd% && set R=%R%
if /i "%~1"=="nothsepar" && set thsepar=Y
shift
#NOTNEEDED#set n1=%~1 &; echo n1=%n1% && if /i %n1:~-2,2%==mr && set n1=%n1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n1%==r && set n1=%R% ! if /i %n1%==-r && set n1=-%R%
set n1=%~1 &; if /i "%n1:~-1,1%"=="!" && set n1=%n1:~0,-1% &; if %n1:~0,1%==- && set n1=%n1:~1% && set sign=- ! set sign= &; call :fact goback %n1% &; if exist result && set number=%sign%%%result% && set result= ! set rounded= && goto :endlocal
call :operatersinput %n1% &; if exist message && goto :endlocal
if %n1:~0,1%==- && set sign=- ! if %sign1%==-1 && set sign=-
call Fn.11 "%n1%" "." && call :splitnumber %n1% &; set number=%N% && set N= && set numdecis=
if not exist number && set /a number=%~n1 &; if not exist number && set result=%~1 && goto :endlocal
if %number:~0,1%==+ && set number=%number:~1% ! if %number:~0,1%==- && set number=%number:~1% && set sign=-
set decimals=%~x1 &; if exist decimals && set decimals=%decimals:~1%
if exist decimals && set R=%sign%%%number%.%decimals% ! set R=%sign%%%number%
if %thsepar%==Y && endlocal && set result=%R% && set R=%R% && goto :eof
set t=, && if not exist number && set number=%N1% && set decimals=%decimal1%
if %number%<=999 && set result=%number% ! if %number%<=9999 && set result=%number:~0,1%%%t%%%number:~1% ! if %number%<=99999 && set result=%number:~0,2%%%t%%%number:~2% ! if %number%<=999999 && set result=%number:~0,3%%%t%%%number:~3% ! if %number%<=9999999 && set result=%number:~0,1%%%t%%%number:~1,3%%%t%%%number:~4% ! if %number%<=99999999 && set result=%number:~0,2%%%t%%%number:~2,3%%%t%%%number:~5% ! if %number%<=999999999 && set result=%number:~0,3%%%t%%%number:~3,3%%%t%%%number:~6,3% ! if %number%<=9999999999 && set result=%number:~0,1%%%t%%%number:~1,3%%%t%%%number:~4,3%%%t%%%number:~7,3% ! if %number%<=99999999999 && set result=%number:~0,2%%%t%%%number:~2,3%%%t%%%number:~5,3%%%t%%%number:~8,3% ! if %number%<=999999999999 && set result=%number:~0,3%%%t%%%number:~3,3%%%t%%%number:~6,3%%%t%%%number:~9,3%
if %number%>=1000000000000 &; if %number%<=9999999999999 && set result=%number:~0,1%%%t%%%number:~1,3%%%t%%%number:~4,3%%%t%%%number:~7,3%%%t%%%number:~10,3% ! if %number%<=99999999999999 && set result=%number:~0,2%%%t%%%number:~2,3%%%t%%%number:~5,3%%%t%%%number:~8,3%%%t%%%number:~11,3% ! if %number%<=999999999999999 && set result=%number:~0,3%%%t%%%number:~3,3%%%t%%%number:~6,3%%%t%%%number:~9,3%%%t%%%number:~12,3% ! if %number%<=9999999999999999 && set result=%number:~0,1%%%t%%%number:~1,3%%%t%%%number:~4,3%%%t%%%number:~7,3%%%t%%%number:~10,3%%%t%%%number:~13,3% ! if %number%<=99999999999999999 && set result=%number:~0,2%%%t%%%number:~2,3%%%t%%%number:~5,3%%%t%%%number:~8,3%%%t%%%number:~11,3%%%t%%%number:~14,3% ! if %number%<=999999999999999999 && set result=%number:~0,3%%%t%%%number:~3,3%%%t%%%number:~6,3%%%t%%%number:~9,3%%%t%%%number:~12,3%%%t%%%number:~15,3% ! if %number%<=9999999999999999999 && set result=%number:~0,1%%%t%%%number:~1,3%%%t%%%number:~4,3%%%t%%%number:~7,3%%%t%%%number:~10,3%%%t%%%number:~13,3%%%t%%%%number:~16,3% ! set result=
if exist decimals && set result=%sign%%%result%.%decimals% ! set result=%sign%%%result%
endlocal && set result=%result% && set R=%R%
goto :eof

:max
#-#+ MAX \tFunction MAX  - Highest of numbers behind
#-#  Use 1\tCALCD.G4B MAX number1 number2 [number3 ...]\nUse 2\tCALCD.G4B MAX MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B MAX 1 2 3 4 5 6\nExample CALCD.G4B MAX 0.5 2.1 1.2 7.3 4 3.5 0.6\nExample CALCD.G4B MAX 1! 2! 3! 4! 5! 6!\nExample CALCD.G4B 5! M MAX 1! 2! 3! 4! MR 6! 7! 8! THSEP\nExample CALCD.G4B MAX 1 2 3 4 5 6 M MAX 7 8 9 10 * MR\nExample CALCD.G4B MAX MD (md)0x3000+255\nExample CALCD.G4B MAX MD (md)0x3000+255 ^ 2\nExample CALCD.G4B MAX MD (md)0x3000+255 M 20! / MR
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if %~1==goback && set goback=Y
if "%~3"=="" &; if %goback%==Y && endlocal && set "message=Abort: argument(s) missing in MAX" && goto :eof ! endlocal && set "message=Abort: argument(s) missing in MAX" && goto :calcfpend
shift
if /i %~1==md &; if %~d2==(md) && set md=%~2 && shift && shift ! if %goback%==Y && endlocal && set "message=Abort MAX: (md)-device in '%~2' not found" && set result= && goto :eof ! endlocal && set "message=Abort MAX: (md)-device in '%~2' not found" && set result= && goto :calcfpend
if exist md &; call Fn.11 "%md%" "+" |; if %goback%==Y && endlocal && set "message=Abort MAX: (md)-device in '%md%' not valid" && set result= && goto :eof ! endlocal && set "message=Abort MAX: (md)-device in '%md%' not valid" && set result= && goto :calcfpend
if exist md && if %md:~-3,3%>=256 &; if %goback%==Y && endlocal && set "message=Abort MAX: sectors of (md)-device in '%md%' above 255" && set result= && goto :eof ! endlocal && set "message=Abort MAX: sectors of (md)-device in '%md%' above 255" && set result= && goto :calcfpend
if not exist md && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N1%==r && set N1=%R% ! if /i %N1%==-r && set N1=-%R%
if not exist md && set N2=%~2 &; if /i %N2:~-2,2%==mr && set N2=%N2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N2%==r && set N2=%R% ! if /i %N2%==-r && set N2=-%R%
if not exist md && call :">=" ">=" %N1% %N2% &; if exist result && if %result%==1 && set result=%N1% ! if %result%==0 && set result=%N2% ! if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result=%result% && goto :calcfpend
if not exist md && if exist result && call :+ + %result% 0 &; if exist message &; if %goback%==Y && endlocal && set result= && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result= && goto :calcfpend
if not exist md &; if not "%~3"=="" && shift && shift && goto :maxloop ! if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result=%result% && goto :calcfpend
cat %md% | call :maxloop &; if exist result && call :+ + %result% 0 &; if exist message &; if %goback%==Y && endlocal && set result= && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result= && goto :calcfpend
#org#cat %md% | call :maxloop  &; if exist result && if "%~1"=="" && endlocal && set result=%result% && goto :calcfpend ! if not exist result && endlocal && set "message=%message%" && set result= && goto :calcfpend
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if %goback%==Y && endlocal && set result=%result% && set "message=%message%" && goto :eof ! endlocal && set result=%result% && set "message=%message%" && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfpend
:maxloop
if exist md && if "%~1"=="" && goto :eof
if exist md && if exist result && set max=%result% && call :">=" ">=" %~1 %result% &; if exist result && if %result%==1 && set result=%~1 ! if %result%==0 && set result=%max% ! goto :eof
if exist md && if not exist result && call :">=" ">=" %~1 %~2 &; shift &; if exist result && if %result%==1 && set result=%~1 ! if %result%==0 && set result=%~2 ! goto :eof
if exist md && shift && goto :maxloop
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="" && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd%
if not "%~1"=="" && set max=%result% && call :">=" ">=" %N1% %result% &; if exist result && if %result%==1 && set result=%N1% && shift ! if %result%==0 && set result=%max% && shift ! endlocal && set "message=%message%" && set result= && goto :calcfpend
if not "%~1"=="" && goto :maxloop
:maxend
if exist result && call :+ + %result% 0
if %goback%==Y && endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof
endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd%
goto :calcfpend

:min
#-#+ MIN \tFunction MIN  - Lowest of numbers behind
#-#  Use 1\tCALCD.G4B MIN number1 number2 [number3 ...]\nUse 2\tCALCD.G4B MIN MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\nExample CALCD.G4B MIN 1 2 3 4 5 6\nExample CALCD.G4B MIN 0.5 2.1 1.2 7.3 4 3.5 0.6\nExample CALCD.G4B MIN 1! 2! 3! 4! 5! 6!\nExample CALCD.G4B 5! M MIN 1! 2! 3! 4! MR 6! 7! 8! THSEP\nExample CALCD.G4B MIN 1 2 3 4 5 6 M MIN 7 8 9 10 * MR\nExample CALCD.G4B MIN MD (md)0x3000+255\nExample CALCD.G4B MIN MD (md)0x3000+255 ^ 2\nExample CALCD.G4B MIN MD (md)0x3000+255 M 20! / MR
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
if %~1==goback && set goback=Y
if "%~3"=="" &; if %goback%==Y && endlocal && set "message=Abort: argument(s) missing in MIN" && goto :eof ! endlocal && set "message=Abort: argument(s) missing in MIN" && goto :calcfpend
shift
if /i %~1==md &; if %~d2==(md) && set md=%~2 && shift && shift ! if %goback%==Y && endlocal && set "message=Abort MIN: (md)-device in '%~2' not found" && set result= && goto :eof ! endlocal && set "message=Abort MIN: (md)-device in '%~2' not found" && set result= && goto :calcfpend
if exist md &; call Fn.11 "%md%" "+" |; if %goback%==Y && endlocal && set "message=Abort MIN: (md)-device in '%md%' not valid" && set result= && goto :eof ! endlocal && set "message=Abort MIN: (md)-device in '%md%' not valid" && set result= && goto :calcfpend
if exist md && if %md:~-3,3%>=256 &; if %goback%==Y && endlocal && set "message=Abort MIN: sectors of (md)-device in '%md%' above 255" && set result= && goto :eof ! endlocal && set "message=Abort MIN: sectors of (md)-device in '%md%' above 255" && set result= && goto :calcfpend
if not exist md && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N1%==r && set N1=%R% ! if /i %N1%==-r && set N1=-%R%
if not exist md && set N2=%~2 &; if /i %N2:~-2,2%==mr && set N2=%N2:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %N2%==r && set N2=%R% ! if /i %N2%==-r && set N2=-%R%
if not exist md && call :"<=" "<=" %N1% %N2% &; if exist result && if %result%==1 && set result=%N1% ! if %result%==0 && set result=%N2% ! if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result=%result% && goto :calcfpend
if not exist md && if exist result && call :+ + %result% 0 &; if exist message &; if %goback%==Y && endlocal && set result= && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result= && goto :calcfpend
if not exist md &; if not "%~3"=="" && shift && shift && goto :minloop ! if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result=%result% && goto :calcfpend
cat %md% | call :minloop  &; if exist result && call :+ + %result% 0 &; if exist message &; if %goback%==Y && endlocal && set result= && set "message=%message%" && goto :eof ! endlocal && set "message=%message%" && set result= && goto :calcfpend
#org#cat %md% | call :minloop  &; if exist result && if "%~1"=="" && endlocal && set result=%result% && goto :calcfpend ! if not exist result && endlocal && set "message=%message%" && set result= && goto :calcfpend
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if %goback%==Y && endlocal && set result=%result% && set "message=%message%" && goto :eof ! endlocal && set result=%result% && set "message=%message%" && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfpend
:minloop
if exist md && if "%~1"=="" && goto :eof
if exist md && if exist result && set min=%result% && call :"<=" "<=" %~1 %result% &; if exist result && if %result%==1 && set result=%~1 ! if %result%==0 && set result=%min% ! goto :eof
if exist md && if not exist result && call :"<=" "<=" %~1 %~2 &; shift &; if exist result && if %result%==1 && set result=%~1 ! if %result%==0 && set result=%~2 ! goto :eof
if exist md && shift && goto :minloop
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; if %goback%==Y && endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof ! endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="" && set N1=%~1 &; if /i %N1:~-2,2%==mr && set N1=%N1:~0,-2%%%MR% && set lastrnd=%memrnd%
if not "%~1"=="" && set min=%result% && call :"<=" "<=" %N1% %result% &; if exist result && if %result%==1 && set result=%N1% && shift ! if %result%==0 && set result=%min% && shift ! endlocal && set "message=%message%" && set result= && goto :calcfpend
if not "%~1"=="" && goto :minloop
:minend
if exist result && call :+ + %result% 0
if %goback%==Y && endlocal && set "message=%message%" && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :eof
endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd%
goto :calcfpend

:countif
#-#+ COUNTIF \tFunction COUNTIF  - Count of numbers behind satisfying 'if'-condition
#-#  Use 1\tCALCD.G4B COUNTIF "==n"|"=>n"|"<=n"|">n"|"<n" number1 number2 [numbern]\nUse 2\tCALCD.G4B COUNTIF "==n"|"=>n"|"<=n"|">n"|"<n" MD FILE\nRemarks Prefix function, result can be used as input to infix or postfix\n\tfunctions. New prefix function restarts calculation\n\tFILE must be an md-device containing numbers only, max 255 sectors\n\tSeparators in FILE: spaces (20), 0A or 0D0A\n\tn \xF110exp-18 - 2exp63-1, 0!-20!, MR, R (integers hex too, decimals: dot)\nExample CALCD.G4B COUNTIF "==3" 1 2 3 1 2 3\nExample CALCD.G4B COUNTIF ">=3" 1 2 3 4 5 6\nExample CALCD.G4B COUNTIF "<=1.5" 0.5 1.5 2.5 3.5 4.5 5.5 0.05\nExample CALCD.G4B COUNTIF ">=1k" 1,000 1010 0x3F2 1030 1,040 1k\nExample CALCD.G4B COUNTIF "<3!" 0! 1! 2! 3! 4! 5! 4! 3! 2! 1! 0!\nExample CALCD.G4B  5! M COUNTIF "<=MR" 1! 2! 3! 4! MR 6! 7! * 8! THSEP\nExample CALCD.G4B COUNTIF ">=3" 1 2 3 4 5 M \x3B\x3B if \x25MR\x25>=4\x20&&\x20CALCD.G4B MR ^ MR\nExample CALCD.G4B COUNTIF "==3" MD (md)0x3000+255\nExample CALCD.G4B COUNTIF ">=3" MD (md)0x3000+255 ^ 2\nExample CALCD.G4B COUNTIF "<=5.49" MD (md)0x3000+255 M \x3B\x3B if \x25MR\x25<=7 echo GOOD
if /i "%~1"=="countif" && shift ! set "message=Abort COUNTIF: wrong call" && set result= && goto :calcfpend
setlocal && set * && set rounded=%rounded% && set MR=%MR% && set lastrnd=%lastrnd% && set memrnd=%memrnd% && set R=%R% && set fix=%fix%
set "ARG=%~1" &; if "%ARG:~0,2%"=="==" && set "if===" && set C=%ARG:~2% ! if "%ARG:~0,2%"==">=" && set "if=>=" && set C=%ARG:~2% ! if "%ARG:~0,1%"==">" && set "if=>" && set C=%ARG:~1% ! if "%ARG:~0,2%"=="<=" && set "if=<=" && set C=%ARG:~2% ! if "%ARG:~0,1%"=="<" && set "if=<" && set C=%ARG:~1%
#OKE#echo "if=%if%" C=%C%
shift
if /i %~1==md &; if %~d2==(md) && set md=%~2 && shift && shift ! endlocal && set "message=Abort COUNTIF: (md)-device in '%~2' not found" && set result= && goto :calcfpend
if exist md &; call Fn.11 "%md%" "+" |; endlocal && set "message=Abort COUNTIF: (md)-device in '%md%' not valid" && set result= && goto :calcfpend
if exist md && if %md:~-3,3%>=256 && endlocal && set "message=Abort COUNTIF: sectors of (md)-device in '%md%' above 255" && set result= && goto :calcfpend
if not exist md && if "%~2"=="" && endlocal && set "message=Abort: argument(s) missing in COUNTIF" && goto :calcfpend
set count=0 && if not exist md && goto :countifloop
cat %md% | call :countifloop  &; if not exist count && endlocal && set "message=%message%" && set result= && goto :calcfpend
if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; endlocal && set result=%result% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd% && goto :calcfploop
if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; endlocal && set result=%result% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
goto :endcountif
:countifloop
if "%~1"=="" &; if not exist md && goto :endcountif ! goto :eof
if not exist md &; if not /i "%~1"=="sqrt" if not /i "%~1"=="cbrt" if not /i "%~1"=="inv" if not /i "%~1"=="m" if not /i "%~1"=="m+" if not /i "%~1"=="m-" if not /i "%~1"=="rm" if not "%~1"=="\\" if not /i "%~1"=="hex" if not /i "%~1"=="sq" if not /i "%~1"=="cb" if not /i "%~1"=="thsep" |; endlocal && set result=%count% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not exist md &; if not "%~1"=="+" if not "%~1"=="-" if not "%~1"=="*" if not "%~1"=="/" if not "%~1"=="^" if not /i "%~1"=="round" if not /i "%~1"=="deci" if not /i "%~1"=="digi" if not /i "%~1"=="fix" |; endlocal && set result=%count% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
if not exist md &; if not /i "%~1"=="sum" if not /i "%~1"=="count" if not /i "%~1"=="mean" if not /i "%~1"=="product" if not /i "%~1"=="fact" if not /i "%~1"=="varp" if not /i "%~1"=="vars" if not /i "%~1"=="stdevp" if not /i "%~1"=="stdevs" if not /i "%~1"=="Pnr" if not /i "%~1"=="Cnr" if not "%~1"=="==" if not "%~1"==">=" if not "%~1"=="<=" if not /i "%~1"=="max" if not /i "%~1"=="min" if not /i "%~1"=="countif" |; endlocal && set result=%count% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfprestart
if not exist md &; if not /i "%~1"=="ts" if not /i "%~1"=="tsp" if not /i "%~1"=="tsep" if not /i "%~1"=="ths" if not /i "%~1"=="thsp" if not /i "%~1"=="thsep" if not /i "%~1"=="thssep" |; endlocal && set result=%count% && set rounded=%rounded% && set lastrnd=%lastrnd% && goto :calcfploop
set n=%~1 &; if /i %n:~-2,2%==mr && set n=%n:~0,-2%%%MR% && set lastrnd=%memrnd% ! if /i %n%==r && set n=%R% ! if /i %n%==-r && set n=-%R%
if /i "%n:~-1,1%"=="!" && set n=%n:~0,-1% &; if %n:~0,1%==- && set n=%n:~1% && set sign=- ! set sign= &; call :fact goback %n% &; if exist result && set n=%sign%%%result% && set result= ! if exist md && set count= && goto :eof ! endlocal && set result= && set "message=%message%" && goto :calcfpend
#OKE#echo n=%n% C=%C%
if "%if%"=="==" && call :"==" "==" %n% %C% &; if %result%==1 && set /a count=%count%+1 && set result= ! if %result%==0 && result= ! if exist md && set count= && goto :eof ! endlocal && set result= && set "message=%message%" && goto :calcfpend
if "%if%"==">=" && call :">=" ">=" %n% %C% &; if %result%==1 && set /a count=%count%+1 && result= ! if %result%==0 && result= ! if exist md && set count= && goto :eof ! endlocal && set result= && set "message=%message%" && goto :calcfpend
if "%if%"=="<" && call :">=" ">=" %n% %C% &; if %result%==0 && set /a count=%count%+1 && result= ! if %result%==1 && result= ! if exist md && set count= && goto :eof ! endlocal && set result= && set "message=%message%" && goto :calcfpend
if "%if%"=="<=" && call :"<=" "<=" %n% %C% &; if %result%==1 && set /a count=%count%+1 && result= ! if %result%==0 && result= ! if exist md && set count= && goto :eof ! endlocal && set result= && set "message=%message%" && goto :calcfpend
if "%if%"==">" && call :"<=" "<=" %n% %C% &; if %result%==0 && set /a count=%count%+1 && result= ! if %result%==1 && result= ! if exist md && set count= && goto :eof ! endlocal && set result= && set "message=%message%" && goto :calcfpend
shift && goto :countifloop
:endcountif
endlocal && set result=%count% && set rounded=%rounded% && set "message=%message%" && set lastrnd=%lastrnd%
goto :calcfpend

#:pi

:help
setlocal
debug status > nul ;; set /a debugsts=%@retval% > nul && debug 1 && debug msg=3
pager status > nul ;; set /a pagersts=%@retval% > nul && pager on
if not "%~2"=="" && set EXT=%~x0 && set DEVICE=%~d0 && set PATH=%~p0 &; if exist EXT && set FILE=%~nx0 && set EXT= ! set FILE=%~n0.g4b && set EXT= &; if %DEVICE%==(md) && set FILE=%PATH%%%FILE% && set DEVICE= && set PATH= ! set FILE=%DEVICE%%%PATH%%%FILE% && set DEVICE= && set PATH=
if exist FILE && set EOL=\x0A &; cat --skip=0 --locate=!BAT%EOL% --length=5 %FILE% > nul |; cat --skip=0 --locate=!BAT\x0D%EOL% --length=6 %FILE% > nul |; set EOL=\x0D &; cat --skip=0 --locate=!BAT%EOL% --length=5 %FILE% > nul |; set FILE=
if exist FILE && cat --locatei=#-#+\x20%~2\x20 %FILE% > nul &; set /A start=%?%+6 > nul &; cat --skip=%start% --locate=\x20 --number=1 %FILE% > nul &; set /A start=%?%+1 > nul &; cat --skip=%start% --locate=%EOL% --number=1 %FILE% > nul &; set /A echolen=%?%-%start% > nul &; cat --skip=%start% --length=%echolen% %FILE% | echo -e Help\x20
if exist FILE && set /A start=%start%+%echolen% > nul &; cat --skip=%start% --locate=%EOL%#-#\x20 --length=5 %FILE% > nul &; set /A start=%?%+4 > nul &; cat --skip=%start% --locate=%EOL% --number=1 %FILE% > nul &; set /A echolen=%?%-%start% > nul &; cat --skip=%start% --length=%echolen% %FILE% | echo -e
if exist FILE &; if %pagersts%==1 && pager on ! pager off
if exist FILE && endlocal && goto :eof
if not "%~2"=="" && goto :help%~2
echo -e Help\tCALCD.G4B v0.2.1 (20221211), by deomsh
echo -e Output\tResult echood and if exists in variables result R MR lastrnd or message
echo -e Prefix\tFunctions: SUM  PRODUCT  MEAN  VARP  VARS  STDEVP  STDEVS  FACT  Pnr\n\t\           Cnr  "=="  ">="  "<="  COUNT MAX MIN COUNTIF
echo -e Use\tCALCD.G4B [switch] function number1 [number2]\x20|\x20number1 number2\x20|\x20args
echo -e Infix\tOperators:  +   -   *   /  ^   Functions: ROUND  DECI  DIGI  FIX
echo -e Use\tCALCD.G4B [switch] number1 operator|function number2|NUMBER
echo -e Postfix\tFunctions: INV  SQRT  SQ  CBRT  CB  HEX  THSEP
echo -e Use\tCALCD.G4B [switch] number function
echo -e Memory\tFunctions: M  M+  M-  RM   Clear: MC   Placeholders for number: MR  R
echo -e Help\tCALCD.G4B help|--help|/? [function|operator|mem|ver]
echo -e Remarks\tSwitches: /echo or /echoM or /echoR or /V (debug msg=3) or /Q (quiet)\n\tNumbers: \xF1 10exp-18 - 2exp63-1, 0!-20!, MR, R (integers: hex too)\n\tThousand-comma-separator allowed. Decimals: dot, NOT comma (no hex)\n\tTHSEP: adds thousand-comma-separator to last result\n\tOrder of calculation: from left to right. NO brackets allowed\n\tError-messages are echood, while 'result' is deleted (last result: 'R')
echo -e \tContinue calculation: infix/postfix operator/function with last result\n\tRestart: prefix function or number and infix/postfix operator/function\n\tMemory functions do not interrupt calculation (RM exchanges R and MR)\n\tNames/ switches case-insensitive, variables are case-sensitive!\n\tEnding COUNT: with \\\\ only\n\tWatch double-quotes in "=="  ">="  "<="
echo -e Prefix\tFunctions SUM PRODUCT MEAN VARP VARS STDEVP STDEVS come before at least\n\ttwo numbers, COUNT needs minimal one argument ( \\\\ is not counted!)\n\tFACT (Factorial) one integer: 0-20. Pnr (Permutation) and Cnr (Combina-\n\ttion) two integers: n and r (n: 1-20 and r: 0-20)\n\tCompare: "==" ">=" "<=" (double qoutes mandatory!) needs two numbers
echo -e Infix\tOperators + - * / between number/ existing result and second number\n\tOperator ^ between number/result and power (positive whole powers!)\n\tFunctions ROUND and DECI (=strip) between number/ result and integer\n\t(negative: rounds integers). DIGI (rounds) sets number of digits\n\t(negative: less digits). FIX (rounds) sets number of decimals/ zeros
echo -e Postfix\tFunctions INV (inverse) SQRT (square root) SQ (square) CBRT\n\t(cubic root) CB (cubic) HEX and THSEP: come after one number/ result\n\tHEX: no rounding, cut-off decimals\n\tTHSEP adds thousand-comma-separator to last result, earlier ignored!
echo -e Example CALCD.G4B help /
echo -e Example CALCD.G4B help STDEVP
echo -e Example CALCD.G4B --help THSEP
echo -e Example CALCD.G4B /? mem
echo -e Example CALCD.G4B 38 + 2.5 - -27.315 * 1.2895 / -3.1234 ^ 4 SQRT
echo -e Example CALCD.G4B /echo SUM 3.4 2.3 1.2 / 3 M STDEVP 0.5 1 2 M+ MR ROUND 5
echo -e Example CALCD.G4B 1 SQRT M 4 SQRT M+ 9 SQRT M+ 16 SQRT M+ 25 SQRT M+ MR
if %pagersts%==1 && pager on ! pager off
if exist debugsts && debug %debugsts%
endlocal && goto :eof

:smallhelp
echo -e Prefix\tFunctions: SUM PRODUCT MEAN VARP VARS STDEVP STDEVS FACT Pnr Cnr\n\t\           "==" ">=" "<=" COUNT MAX MIN COUNTIF
echo -e Use\tCALCD.G4B [switch] function number1 [number2]\x20|\x20number1 number2\x20|\x20args
echo -e Infix\tOperators: + - * / ^  Functions: ROUND DECI DIGI FIX
echo -e Use\tCALCD.G4B [switch] number1 operator|function number2|NUMBER
echo -e Postfix\tFunctions: INV SQRT SQ CBRT CB HEX THSEP
echo -e Use\tCALCD.G4B [switch] number function
echo -e Memory\tFunctions: M M+ M- RM  Clear: MC  Placeholders for number: MR R
echo -e Numbers\t\xF1 10exp-18 - 2exp63-1, 0!-20!, MR, R (integers hex too, decimals: dot)
echo -e Help\tCALCD.G4B help|--help|/? [function|operator|mem|ver]
goto :eof

#-#+ mem \tMEMORY - Functions: M M+ M- RM  Clear: MC Placeholders for number: MR R
#-# Use 1\tCALCD.G4B [switch] [MC] number M|M+|M-\nUse 2\tCALCD.G4B [switch] [MC] R M|M+|M-\nUse 3\tCALCD.G4B [switch] MR\nUse 4\tCALCD.G4B [switch] function MR number R\nUse 5\tCALCD.G4B [switch] MR function\nUse 6\tCALCD.G4B [switch] MR function number\nUse 7\tCALCD.G4B [switch] number function MR\nUse 8\tCALCD.G4B [switch] [MC] number M|M+|M- function number RM\nRemarks\tPostfix functions, existing result can be used instead of number\n\tMC/ M/ M+/ M- resets/ writes/ adds/ substract number/ result to memory\n\tMR is memory-read, used as number. RM exchanges result and memory\n\tRM needs existing variable 'result', before or during calculation\n\tIf variable 'MR' not exist: 'MR' is set to '0'. 'R' is placeholder for\n\texisting variable 'result', before (next) use of CALCD.G4B (or zero!)\n\tIf 'MR' or 'R' contains integer 0-20, use of MR! or R! is allowed\n\tWriting to memory with MC|M|M+|M-|RM will not interrupt calculation\n\tSwitch /echoM echos changing MR, /echoR echos changing R, /echo both\n\tVariables 'MR' and 'R' are exported/ imported by CALCD.G4B (case!)\nExample CALCD.G4B MC 8 * 7 M+ MR\nExample CALCD.G4B /echo 20 - 13 R! M\x20;;\x20CALCD.G4B /echo 10! / MR RM / MR\nExample CALCD.G4B /echoR SUM 7 8 M PRODUCT 7 8 + MR / 7 M+ MR ROUND 4\nExample set MR=\x20;;\x20CALCD.G4B /echoM 2 ^ 62 M - 1 M+\x20;;\x20CALCD.G4B MR

#-#+ VER \t  VERSIONS in historical order
#-# Operator: SUMMATION v.0.1.9 (20220914)\nOperator: SUBSTRACTION v.0.1.8 (20220914)\nOperator: MULTIPLICATION v.0.1.9 (20220918)\nOperator: DIVISION v.0.1.11 (20220920)\nOperator: EXPONENTATION v.0.1.9 (20220914)\nFunction: SQUARE ROOT v.0.1.9 (20220921)\nFunction: INV v.0.1.2 (20220731)\nFunction: SUM v.0.1.4 (20220730)\nFunction: COUNT v.0.1.5 (20220815)\nFunction: PRODUCT v.0.1.2 (20220729)\nFunction: MEAN v.0.1.2 (20220731)\nFunction: FACT v.0.1.2 (20220815)\nFunction: VARP v.0.1.1 (20220730)\nFunction: VARS v.0.1.1 (20220730)\nFunction: STDEVP v.0.1.1 (20220730)\nFunction: STDEVS v.0.1.1 (20220730)\nFunction: "==" v.0.1.2 (20220903)\nFunction: ">=" v.0.1.2 (20220904)\nFunction: "<=" v.0.1.2 (20220904)\nFunction: PERMUTATION v.0.1.1 (20220811)\nFunction: COMBINATION v.0.1.1 (20220811)\nFunction: ROUND v.0.1.5 (20220917)\nFunction: DECI v.0.1.5 (20220925)\nFunction: DIGI v.0.1.3 (20220914)\nFunction: FIX v.0.1.3 (20220925)\nFunction: CUBIC ROOT v.0.1.3 (20221009)\nFunction: HEX v.0.1.1 (20220928)\nFunction: SQ v.0.1 (20221001)\nFunction: CB v.0.1 (20221001)\nFunction: THSEP v.0.1 (20221005)
